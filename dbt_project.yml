name: 'snowplow_web'
version: '0.15.2'
config-version: 2

require-dbt-version: [">=1.5.0", "<2.0.0"]

profile: 'default'

dispatch:
  - macro_namespace: dbt
    search_order: ['snowplow_utils', 'dbt']

model-paths: ["models"]
test-paths: ["tests"]
macro-paths: ["macros"]
docs-paths: ["docs"]
asset-paths: ["assets"]

target-path: "target"
clean-targets:
    - "target"
    - "dbt_modules"
    - "dbt_packages"

vars:
  snowplow_web:
    # See https://docs.snowplow.io/docs/modeling-your-data/modeling-your-data-with-dbt/dbt-configuration/web/ for more information
    # Warehouse and tracker
    # snowplow__atomic_schema: 'atomic_data_sample' # Only set if not using 'atomic' schema for Snowplow events data
    # snowplow__database:  # Only set if not using target.database for Snowplow events data -- WILL BE IGNORED FOR DATABRICKS
    snowplow__dev_target_name: dev
    snowplow__events: "{{ source('atomic', 'events') }}"
    # snowplow__events_table: "events" # Only set if not using 'events' table for Snowplow events data
    snowplow__heartbeat: 10
    snowplow__min_visit_length: 5
    snowplow__sessions_table: "{{ ref('snowplow_web_sessions') }}" # Change to your custom sessions table if you have disabled the standard sessions table in favour of a custom version. Advanced config.
    snowplow__ga4_categories_seed: snowplow_web_dim_ga4_source_categories
    snowplow__geo_mapping_seed: snowplow_web_dim_geo_country_mapping
    snowplow__rfc_5646_seed: snowplow_web_dim_rfc_5646_language_mapping

    # Operation and logic
    snowplow__allow_refresh: false
    snowplow__backfill_limit_days: 30
    # snowplow__conversion_events: [{'name': 'view_page', 'condition': "event_name = 'page_view'", "list_events": true},
    #                               {'name': 'sign_up', 'condition': "event_name = 'sign_up'", 'value': 5}
    #                             ]
    snowplow__cwv_days_to_measure: 28
    snowplow__cwv_percentile: 75
    snowplow__days_late_allowed: 3
    # snowplow__limit_page_views_to_session: true
    snowplow__list_event_counts: false
    snowplow__lookback_window_hours: 6
    snowplow__max_session_days: 3
    snowplow__session_lookback_days: 730
    snowplow__session_stitching: true
    snowplow__start_date: '2020-01-01'
    # snowplow__total_all_conversions: false
    snowplow__upsert_lookback_days: 30
    snowplow__session_identifiers: [{"table" : "events", "field" : "domain_sessionid"}]
    snowplow__session_timestamp: collector_tstamp
    snowplow__user_identifiers: [{"table": "events", "field" : "domain_userid"}]
    # snowplow__session_sql: 'e.domain_sessionid'
    # snowplow__user_sql: 'e.domain_userid'

    # Contexts, filters, and logs
    snowplow__app_id: []
    snowplow__enable_consent: false
    snowplow__enable_cwv: false
    # Setting default values for 3 enrichments below throughout package rather than here
    # Workaround for a bug (https://github.com/dbt-labs/dbt-core/issues/3698).
    # TODO: Return to having default values here once fixed.
    # snowplow__enable_iab: false
    # snowplow__enable_ua: false
    # snowplow__enable_yauaa: false
    snowplow__ua_bot_filter: true

    # Warehouse Specific
      # Bigquery
    snowplow__derived_tstamp_partitioned: true
      # Snowflake
    snowplow__query_tag: snowplow_dbt
      # Databricks
    # Depending on the use case it should either be the catalog (for Unity Catalog users from databricks connector 1.1.1 onwards) or the same value as your snowplow__atomic_schema (unless changed it should be 'atomic')
    # snowplow__databricks_catalog: 'hive_metastore'
      # Redshift/postgres
    snowplow__entities_or_sdes: []
    snowplow__enable_load_tstamp: true # set to false if you are using the postgres loader or earlier than 4.0.0 of the RDB loader
    snowplow__consent_cmp_visible: com_snowplowanalytics_snowplow_cmp_visible_1
    snowplow__consent_preferences: com_snowplowanalytics_snowplow_consent_preferences_1
    snowplow__page_view_context: com_snowplowanalytics_snowplow_web_page_1
    snowplow__iab_context: com_iab_snowplow_spiders_and_robots_1
    snowplow__ua_parser_context: com_snowplowanalytics_snowplow_ua_parser_context_1
    snowplow__yauaa_context: nl_basjes_yauaa_context_1
    snowplow__cwv_context: unstruct_event_com_snowplowanalytics_snowplow_web_vitals_1

# Completely or partially remove models from the manifest during run start.
on-run-start:
  - "{{ snowplow_utils.snowplow_web_delete_from_manifest(var('models_to_remove',[])) }}"

# Update manifest table with last event consumed per sucessfully executed node/model
on-run-end:
  - "{{ snowplow_utils.snowplow_incremental_post_hook('snowplow_web') }}"


# Tag 'snowplow_web_incremental' allows snowplow_incremental_post_hook to identify Snowplow models
# and add their last sucessfull collector_tstamp to the manifest.
models:
  snowplow_web:
    +materialized: table
    +file_format: delta
    +bind: false
    base:
      +tags: "base"
      manifest:
        +schema: "snowplow_manifest"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
        bigquery:
          enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        databricks:
          enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        default:
          enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
        snowflake:
          enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    optional_modules:
      consent:
        +schema: "derived"
        +tags: ["snowplow_web_incremental", "derived", "consent"]
        scratch:
          +schema: "scratch"
          +tags: "scratch"
      core_web_vitals:
        +schema: "derived"
        +tags: ["snowplow_web_incremental", "derived", "core_web_vitals"]
        scratch:
          +schema: "scratch"
          +tags: "scratch"

    page_views:
      +schema: "derived"
      +tags: "snowplow_web_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
        bigquery:
          enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        databricks:
          enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        default:
          enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
        snowflake:
          enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    sessions:
      +schema: "derived"
      +tags: "snowplow_web_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
        bigquery:
          enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        databricks:
          enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        default:
          enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
        snowflake:
          enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    user_mapping:
      +schema: "derived"
      +tags: "snowplow_web_incremental"
    users:
      +schema: "derived"
      +tags: "snowplow_web_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"

seeds:
  snowplow_web:
    +schema: snowplow_manifest

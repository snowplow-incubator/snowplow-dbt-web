{"results": [{"node": {"raw_sql": "", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "source", "snowplow_web_events"], "unique_id": "seed.snowplow_web_integration_tests.snowplow_web_events", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "source/snowplow_web_events.csv", "original_file_path": "data/source/snowplow_web_events.csv", "name": "snowplow_web_events", "resource_type": "seed", "alias": "snowplow_web_events", "checksum": {"name": "sha256", "checksum": "8903af41d6f739524a84b79974f68329c56b8efe3a426bb050caea0f46496913"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"app_id": "string", "etl_tstamp": "timestamp", "collector_tstamp": "timestamp", "dvce_created_tstamp": "timestamp", "user_fingerprint": "string", "ip_isp": "string", "ip_organization": "string", "ip_domain": "string", "ip_netspeed": "string", "page_urlfragment": "string", "refr_urlfragment": "string", "refr_medium": "string", "refr_source": "string", "refr_term": "string", "mkt_term": "string", "mkt_content": "string", "se_label": "string", "se_property": "string", "se_value": "float", "tr_orderid": "string", "tr_affiliation": "string", "tr_total": "float", "tr_tax": "float", "tr_shipping": "float", "tr_city": "string", "tr_state": "string", "tr_country": "string", "ti_orderid": "string", "ti_sku": "string", "ti_name": "string", "ti_category": "string", "ti_price": "float", "br_name": "string", "br_family": "string", "br_version": "string", "br_type": "string", "br_renderengine": "string", "br_colordepth": "string", "os_name": "string", "os_family": "string", "os_manufacturer": "string", "dvce_type": "string", "dvce_ismobile": "boolean", "tr_currency": "string", "tr_total_base": "float", "tr_tax_base": "float", "tr_shipping_base": "float", "ti_currency": "string", "ti_price_base": "float", "base_currency": "string", "etl_tags": "string", "dvce_sent_tstamp": "timestamp", "refr_domain_userid": "string", "refr_dvce_tstamp": "timestamp", "derived_tstamp": "timestamp", "true_tstamp": "timestamp"}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.03900790214538574, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.482916Z", "completed_at": "2021-11-22T12:15:22.518091Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.521113Z", "completed_at": "2021-11-22T12:15:22.521122Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "bigquery", "snowplow_web_page_views_expected"], "unique_id": "seed.snowplow_web_integration_tests.snowplow_web_page_views_expected", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/bigquery/snowplow_web_page_views_expected.csv", "original_file_path": "data/expected/bigquery/snowplow_web_page_views_expected.csv", "name": "snowplow_web_page_views_expected", "resource_type": "seed", "alias": "snowplow_web_page_views_expected", "checksum": {"name": "sha256", "checksum": "647f3a5a34042d6ed4f2a152e6b92394756709d39a032b05fc7474e0c2b3c4d5"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"horizontal_percentage_scrolled": "float", "vertical_percentage_scrolled": "float", "dvce_created_tstamp": "timestamp", "collector_tstamp": "timestamp", "derived_tstamp": "timestamp", "start_tstamp": "timestamp", "end_tstamp": "timestamp", "page_urlfragment": "string", "mkt_term": "string", "mkt_content": "string", "refr_urlfragment": "string", "refr_medium": "string", "refr_source": "string", "refr_term": "string", "br_colordepth": "string", "br_renderengine": "string", "category": "string", "primary_impact": "string", "reason": "string", "spider_or_robot": "boolean", "useragent_family": "string", "useragent_major": "string", "useragent_minor": "string", "useragent_patch": "string", "useragent_version": "string", "os_family": "string", "os_major": "string", "os_minor": "string", "os_patch": "string", "os_patch_minor": "string", "os_version": "string", "device_family": "string", "device_class": "string", "agent_class": "string", "agent_name": "string", "agent_name_version": "string", "agent_name_version_major": "string", "agent_version": "string", "agent_version_major": "string", "device_brand": "string", "device_name": "string", "device_version": "string", "layout_engine_class": "string", "layout_engine_name": "string", "layout_engine_name_version": "string", "layout_engine_name_version_major": "string", "layout_engine_version": "string", "layout_engine_version_major": "string", "operating_system_class": "string", "operating_system_name": "string", "operating_system_name_version": "string", "operating_system_version": "string"}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.00937199592590332, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.522214Z", "completed_at": "2021-11-22T12:15:22.526980Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.527483Z", "completed_at": "2021-11-22T12:15:22.527488Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='incremental',\n    full_refresh=snowplow_web.allow_refresh()\n  ) \n}}\n\n-- Boilerplate to generate table.\n-- Table updated as part of end-run hook\n\n{# Redshift produces varchar(1) column. Fixing char limit #}\n{% set type_string = dbt_utils.type_string() %}\n{% set type_string = 'varchar(4096)' if type_string == 'varchar' else type_string %}\n\nwith prep as (\n  select\n    cast(null as {{ type_string }}) model,\n    cast('1970-01-01' as {{ dbt_utils.type_timestamp() }}) as last_success\n)\n\nselect *\n\nfrom prep\nwhere false", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snowplow_manifest", "fqn": ["snowplow_web", "base", "manifest", "snowplow_web_incremental_manifest"], "unique_id": "model.snowplow_web.snowplow_web_incremental_manifest", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/manifest/snowplow_web_incremental_manifest.sql", "original_file_path": "models/base/manifest/snowplow_web_incremental_manifest.sql", "name": "snowplow_web_incremental_manifest", "resource_type": "model", "alias": "snowplow_web_incremental_manifest", "checksum": {"name": "sha256", "checksum": "3bdb974aee3209e9a553d880e755318681af51814f7ccfc31bc30c83609563c3"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snowplow_manifest", "database": null, "tags": [], "full_refresh": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.allow_refresh", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"], "nodes": []}, "description": "This incremental table is a manifest of the timestamp of the latest event consumed per model within the `snowplow-web` package as well as any models leveraging the incremental framework provided by the package. The latest event's timestamp is based off `collector_tstamp`. This table is used to determine what events should be processed in the next run of the model.", "columns": {"model": {"name": "model", "description": "The name of the model.", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "last_success": {"name": "last_success", "description": "The latest event consumed by the model, based on `collector_tstamp`", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/manifest/base_manifest.yml", "build_path": "target/compiled/snowplow_web/models/base/manifest/snowplow_web_incremental_manifest.sql", "deferred": false, "compiled_sql": "\n\n-- Boilerplate to generate table.\n-- Table updated as part of end-run hook\n\n\n\n\n\nwith prep as (\n  select\n    cast(null as \n    string\n) model,\n    cast('1970-01-01' as \n    timestamp\n) as last_success\n)\n\nselect *\n\nfrom prep\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- Boilerplate to generate table.\n-- Table updated as part of end-run hook\n\n\n\n\n\nwith prep as (\n  select\n    cast(null as \n    string\n) model,\n    cast('1970-01-01' as \n    timestamp\n) as last_success\n)\n\nselect *\n\nfrom prep\nwhere false"}, "error": null, "status": null, "execution_time": 0.04907083511352539, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.482864Z", "completed_at": "2021-11-22T12:15:22.527195Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.527681Z", "completed_at": "2021-11-22T12:15:22.527685Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='incremental',\n    full_refresh=snowplow_web.allow_refresh()\n  ) \n}}\n\n/* \nBoilerplate to generate table.\nTable updated as part of post-hook on sessions_this_run\nAny sessions exceeding max_session_days are quarantined\nOnce quarantined, any subsequent events from the session will not be processed.\nThis significantly reduces table scans\n*/\n\n{# Redshift produces varchar(1) column. Fixing char limit #}\n{% set type_string = dbt_utils.type_string() %}\n{% set type_string = 'varchar(64)' if type_string == 'varchar' else type_string %}\n\nwith prep as (\n  select\n    cast(null as {{ type_string }}) session_id\n)\n\nselect *\n\nfrom prep\nwhere false", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snowplow_manifest", "fqn": ["snowplow_web", "base", "manifest", "snowplow_web_base_quarantined_sessions"], "unique_id": "model.snowplow_web.snowplow_web_base_quarantined_sessions", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/manifest/snowplow_web_base_quarantined_sessions.sql", "original_file_path": "models/base/manifest/snowplow_web_base_quarantined_sessions.sql", "name": "snowplow_web_base_quarantined_sessions", "resource_type": "model", "alias": "snowplow_web_base_quarantined_sessions", "checksum": {"name": "sha256", "checksum": "05ed0360a51fc718b1c0a177468c584a0b744a9dc278022f8a4639a1858468a2"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snowplow_manifest", "database": null, "tags": [], "full_refresh": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.allow_refresh", "macro.dbt_utils.type_string"], "nodes": []}, "description": "This table contains any sessions that have been quarantined. Sessions are quarantined once they exceed the maximum allowed session length, defined by `snowplow__max_session_days`.\nOnce quarantined, no further events from these sessions will be processed. Events up until the point of quarantine remain in your derived tables.\nThe reason for removing long sessions is to reduce table scans on both the events table and all derived tables. This improves performance greatly.", "columns": {"session_id": {"name": "session_id", "description": "The `session_id` of the quarantined session", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/manifest/base_manifest.yml", "build_path": "target/compiled/snowplow_web/models/base/manifest/snowplow_web_base_quarantined_sessions.sql", "deferred": false, "compiled_sql": "\n\n/* \nBoilerplate to generate table.\nTable updated as part of post-hook on sessions_this_run\nAny sessions exceeding max_session_days are quarantined\nOnce quarantined, any subsequent events from the session will not be processed.\nThis significantly reduces table scans\n*/\n\n\n\n\n\nwith prep as (\n  select\n    cast(null as \n    string\n) session_id\n)\n\nselect *\n\nfrom prep\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n/* \nBoilerplate to generate table.\nTable updated as part of post-hook on sessions_this_run\nAny sessions exceeding max_session_days are quarantined\nOnce quarantined, any subsequent events from the session will not be processed.\nThis significantly reduces table scans\n*/\n\n\n\n\n\nwith prep as (\n  select\n    cast(null as \n    string\n) session_id\n)\n\nselect *\n\nfrom prep\nwhere false"}, "error": null, "status": null, "execution_time": 0.04965400695800781, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.482800Z", "completed_at": "2021-11-22T12:15:22.527363Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.530914Z", "completed_at": "2021-11-22T12:15:22.530919Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "bigquery", "snowplow_web_base_quarantined_sessions_expected"], "unique_id": "seed.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_expected", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/bigquery/snowplow_web_base_quarantined_sessions_expected.csv", "original_file_path": "data/expected/bigquery/snowplow_web_base_quarantined_sessions_expected.csv", "name": "snowplow_web_base_quarantined_sessions_expected", "resource_type": "seed", "alias": "snowplow_web_base_quarantined_sessions_expected", "checksum": {"name": "sha256", "checksum": "c95393a274acc2b3d97fbe2e12533a5427cbca558bd3ee1d61d6a0fb3a9cb460"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.04965400695800781, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.482964Z", "completed_at": "2021-11-22T12:15:22.530767Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.531466Z", "completed_at": "2021-11-22T12:15:22.531470Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "bigquery", "snowplow_web_sessions_expected"], "unique_id": "seed.snowplow_web_integration_tests.snowplow_web_sessions_expected", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/bigquery/snowplow_web_sessions_expected.csv", "original_file_path": "data/expected/bigquery/snowplow_web_sessions_expected.csv", "name": "snowplow_web_sessions_expected", "resource_type": "seed", "alias": "snowplow_web_sessions_expected", "checksum": {"name": "sha256", "checksum": "fe51a55f4a0e8ba46ecc8ea6f0dc0193ca6ed1dfc7cd0d3979b89e4aadde6cab"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"app_id": "string", "start_tstamp": "timestamp", "end_tstamp": "timestamp", "first_page_urlfragment": "string", "last_page_urlfragment": "string", "refr_urlquery": "string", "refr_urlfragment": "string", "refr_medium": "string", "refr_source": "string", "refr_term": "string", "mkt_term": "string", "mkt_content": "string", "br_renderengine": "string", "category": "string", "primary_impact": "string", "reason": "string", "spider_or_robot": "boolean", "useragent_family": "string", "useragent_major": "string", "useragent_minor": "string", "useragent_patch": "string", "useragent_version": "string", "os_family": "string", "os_major": "string", "os_minor": "string", "os_patch": "string", "os_patch_minor": "string", "os_version": "string", "device_family": "string", "device_class": "string", "agent_class": "string", "agent_name": "string", "agent_name_version": "string", "agent_name_version_major": "string", "agent_version": "string", "agent_version_major": "string", "device_brand": "string", "device_name": "string", "device_version": "string", "layout_engine_class": "string", "layout_engine_name": "string", "layout_engine_name_version": "string", "layout_engine_name_version_major": "string", "layout_engine_version": "string", "layout_engine_version_major": "string", "operating_system_class": "string", "operating_system_name": "string", "operating_system_name_version": "string", "operating_system_version": "string"}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.022037982940673828, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.533321Z", "completed_at": "2021-11-22T12:15:22.537752Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.546692Z", "completed_at": "2021-11-22T12:15:22.546697Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "bigquery", "snowplow_web_users_expected"], "unique_id": "seed.snowplow_web_integration_tests.snowplow_web_users_expected", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/bigquery/snowplow_web_users_expected.csv", "original_file_path": "data/expected/bigquery/snowplow_web_users_expected.csv", "name": "snowplow_web_users_expected", "resource_type": "seed", "alias": "snowplow_web_users_expected", "checksum": {"name": "sha256", "checksum": "a945220194f621520b7e5d79dcaaeaa3e47c1cffd14545c959f2ae868f1e637d"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"start_tstamp": "timestamp", "end_tstamp": "timestamp", "first_page_urlfragment": "string", "last_page_urlfragment": "string", "refr_urlquery": "string", "refr_urlfragment": "string", "refr_medium": "string", "refr_source": "string", "refr_term": "string", "mkt_term": "string", "mkt_content": "string"}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.022055864334106445, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.533380Z", "completed_at": "2021-11-22T12:15:22.541515Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.546825Z", "completed_at": "2021-11-22T12:15:22.546828Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- page view context is given as json string in csv. Extract array from json\nwith prep as (\nselect\n  *\n  except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  JSON_EXTRACT_ARRAY(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) AS contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom {{ ref('snowplow_web_events') }}\n)\n\n-- recreate repeated record field i.e. array of structs as is originally in BQ events table\nselect\n  * except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  array(\n    select as struct JSON_EXTRACT_scalar(json_array,'$.id') as id \n    from unnest(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) as json_array\n    ) as contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom prep\n\nwhere {{ edge_cases_to_ignore() }} --filter out any edge cases we havent yet solved for but are included in the test dataset.", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "source", "bigquery", "snowplow_web_events_stg"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_events_stg", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "source/bigquery/snowplow_web_events_stg.sql", "original_file_path": "models/source/bigquery/snowplow_web_events_stg.sql", "name": "snowplow_web_events_stg", "resource_type": "model", "alias": "snowplow_web_events_stg", "checksum": {"name": "sha256", "checksum": "0884dddd9297751356eabb92254b23f4e07c5b5490c90a189ed5b1c405b7566d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_events"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web_integration_tests.edge_cases_to_ignore"], "nodes": ["seed.snowplow_web_integration_tests.snowplow_web_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/source/bigquery/snowplow_web_events_stg.sql", "deferred": false, "compiled_sql": "-- page view context is given as json string in csv. Extract array from json\nwith prep as (\nselect\n  *\n  except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  JSON_EXTRACT_ARRAY(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) AS contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events\n)\n\n-- recreate repeated record field i.e. array of structs as is originally in BQ events table\nselect\n  * except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  array(\n    select as struct JSON_EXTRACT_scalar(json_array,'$.id') as id \n    from unnest(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) as json_array\n    ) as contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom prep\n\nwhere \n  user_id not in (\n    'stray page ping', -- Known unsolved issue https://github.com/snowplow/data-models/issues/92\n    'NULL domain_userid' -- Case when `domain_userid` is null but `domain_sessionid` is not null. Shouldn't happen. Will solve if it arises.\n    )\n --filter out any edge cases we havent yet solved for but are included in the test dataset.", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- page view context is given as json string in csv. Extract array from json\nwith prep as (\nselect\n  *\n  except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  JSON_EXTRACT_ARRAY(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) AS contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events\n)\n\n-- recreate repeated record field i.e. array of structs as is originally in BQ events table\nselect\n  * except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0),\n  array(\n    select as struct JSON_EXTRACT_scalar(json_array,'$.id') as id \n    from unnest(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) as json_array\n    ) as contexts_com_snowplowanalytics_snowplow_web_page_1_0_0\n\nfrom prep\n\nwhere \n  user_id not in (\n    'stray page ping', -- Known unsolved issue https://github.com/snowplow/data-models/issues/92\n    'NULL domain_userid' -- Case when `domain_userid` is null but `domain_sessionid` is not null. Shouldn't happen. Will solve if it arises.\n    )\n --filter out any edge cases we havent yet solved for but are included in the test dataset."}, "error": null, "status": null, "execution_time": 0.023515939712524414, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.533564Z", "completed_at": "2021-11-22T12:15:22.555232Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.555820Z", "completed_at": "2021-11-22T12:15:22.555824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * \n\nfrom {{ ref('snowplow_web_page_views_expected') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "snowplow_web_page_views_expected_stg"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_page_views_expected_stg", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/snowplow_web_page_views_expected_stg.sql", "original_file_path": "models/expected/snowplow_web_page_views_expected_stg.sql", "name": "snowplow_web_page_views_expected_stg", "resource_type": "model", "alias": "snowplow_web_page_views_expected_stg", "checksum": {"name": "sha256", "checksum": "688b9bcea8b8cb74e04682151057549eadda076e7e78b188098606c49273bb87"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_page_views_expected"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.snowplow_web_integration_tests.snowplow_web_page_views_expected"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/expected/snowplow_web_page_views_expected_stg.sql", "deferred": false, "compiled_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected"}, "error": null, "status": null, "execution_time": 0.023366212844848633, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.556430Z", "completed_at": "2021-11-22T12:15:22.569786Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.578490Z", "completed_at": "2021-11-22T12:15:22.578495Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ snowplow_utils.snowplow_web_delete_from_manifest(var('models_to_remove',[])) }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "hooks", "snowplow_web-on-run-start-0"], "unique_id": "operation.snowplow_web.snowplow_web-on-run-start-0", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "hooks/snowplow_web-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "snowplow_web-on-run-start-0", "resource_type": "operation", "alias": "snowplow_web-on-run-start-0", "checksum": {"name": "sha256", "checksum": "3e423cf18aee1d60e89018250c35e5bd68a0d08d36cd86cf368107d192538700"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": ["on-run-start"], "refs": [["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.snowplow_web_delete_from_manifest"], "nodes": ["model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/./dbt_project.yml/hooks/snowplow_web-on-run-start-0.sql", "deferred": false, "compiled_sql": "\n\n  \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n  \n\n", "index": 0}, "error": null, "status": null, "execution_time": 0.02366805076599121, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.556649Z", "completed_at": "2021-11-22T12:15:22.578772Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.579228Z", "completed_at": "2021-11-22T12:15:22.579231Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "model", "model": "{{ ref('snowplow_web_incremental_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_incremental_manifest_model"], "unique_id": "test.snowplow_web.not_null_snowplow_web_incremental_manifest_model", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_incremental_manifest_model.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "not_null_snowplow_web_incremental_manifest_model", "resource_type": "test", "alias": "not_null_snowplow_web_incremental_manifest_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/not_null_snowplow_web_incremental_manifest_model.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_incremental_manifest\nwhere model is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_incremental_manifest\nwhere model is null\n\n\n", "column_name": "model"}, "error": null, "status": null, "execution_time": 0.010843276977539062, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.569724Z", "completed_at": "2021-11-22T12:15:22.579513Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.579890Z", "completed_at": "2021-11-22T12:15:22.579893Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "model", "model": "{{ ref('snowplow_web_incremental_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_incremental_manifest_model"], "unique_id": "test.snowplow_web.unique_snowplow_web_incremental_manifest_model", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_incremental_manifest_model.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "unique_snowplow_web_incremental_manifest_model", "resource_type": "test", "alias": "unique_snowplow_web_incremental_manifest_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/unique_snowplow_web_incremental_manifest_model.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        model\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_incremental_manifest\n    where model is not null\n    group by model\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        model\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_incremental_manifest\n    where model is not null\n    group by model\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "model"}, "error": null, "status": null, "execution_time": 0.015542745590209961, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.580155Z", "completed_at": "2021-11-22T12:15:22.594838Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.594971Z", "completed_at": "2021-11-22T12:15:22.594976Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\n\nfrom {{ ref('snowplow_web_base_quarantined_sessions') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "actual", "snowplow_web_base_quarantined_sessions_actual"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_actual", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "actual/snowplow_web_base_quarantined_sessions_actual.sql", "original_file_path": "models/actual/snowplow_web_base_quarantined_sessions_actual.sql", "name": "snowplow_web_base_quarantined_sessions_actual", "resource_type": "model", "alias": "snowplow_web_base_quarantined_sessions_actual", "checksum": {"name": "sha256", "checksum": "385572d2ad2b97ef028e0aa72e367b1aee6ee3c16b4ff9565042934d5febb821"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_base_quarantined_sessions"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.snowplow_web.snowplow_web_base_quarantined_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/actual/actual_vs_expected.yml", "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/snowplow_web_base_quarantined_sessions_actual.sql", "deferred": false, "compiled_sql": "select *\n\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\n\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions"}, "error": null, "status": null, "execution_time": 0.015435934066772461, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.585590Z", "completed_at": "2021-11-22T12:15:22.595090Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.595382Z", "completed_at": "2021-11-22T12:15:22.595384Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_quarantined_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_quarantined_sessions_session_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_quarantined_sessions_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_quarantined_sessions_session_id.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "not_null_snowplow_web_base_quarantined_sessions_session_id", "resource_type": "test", "alias": "not_null_snowplow_web_base_quarantined_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_quarantined_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_quarantined_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/not_null_snowplow_web_base_quarantined_sessions_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.010595083236694336, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.589819Z", "completed_at": "2021-11-22T12:15:22.595489Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.595868Z", "completed_at": "2021-11-22T12:15:22.595870Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_quarantined_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_base_quarantined_sessions_session_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_base_quarantined_sessions_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_base_quarantined_sessions_session_id.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "unique_snowplow_web_base_quarantined_sessions_session_id", "resource_type": "test", "alias": "unique_snowplow_web_base_quarantined_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_quarantined_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_base_quarantined_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/unique_snowplow_web_base_quarantined_sessions_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.014728069305419922, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.596332Z", "completed_at": "2021-11-22T12:15:22.610364Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.610513Z", "completed_at": "2021-11-22T12:15:22.610517Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * \n\nfrom {{ ref('snowplow_web_base_quarantined_sessions_expected') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "snowplow_web_base_quarantined_sessions_expected_stg"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_expected_stg", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/snowplow_web_base_quarantined_sessions_expected_stg.sql", "original_file_path": "models/expected/snowplow_web_base_quarantined_sessions_expected_stg.sql", "name": "snowplow_web_base_quarantined_sessions_expected_stg", "resource_type": "model", "alias": "snowplow_web_base_quarantined_sessions_expected_stg", "checksum": {"name": "sha256", "checksum": "1695be71b5edb37f79bcd10cc1e350496fe94561efd0474f1b1a83c0245a81b0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_base_quarantined_sessions_expected"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_expected"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/expected/snowplow_web_base_quarantined_sessions_expected_stg.sql", "deferred": false, "compiled_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected"}, "error": null, "status": null, "execution_time": 0.015038013458251953, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.601459Z", "completed_at": "2021-11-22T12:15:22.610779Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.611033Z", "completed_at": "2021-11-22T12:15:22.611036Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * \n\nfrom {{ ref('snowplow_web_sessions_expected') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "snowplow_web_sessions_expected_stg"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_sessions_expected_stg", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/snowplow_web_sessions_expected_stg.sql", "original_file_path": "models/expected/snowplow_web_sessions_expected_stg.sql", "name": "snowplow_web_sessions_expected_stg", "resource_type": "model", "alias": "snowplow_web_sessions_expected_stg", "checksum": {"name": "sha256", "checksum": "77ec013287e58b2acd29bf16d64f87bb97140ba5cac93f82a7b379eeed531502"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_sessions_expected"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.snowplow_web_integration_tests.snowplow_web_sessions_expected"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/expected/snowplow_web_sessions_expected_stg.sql", "deferred": false, "compiled_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected"}, "error": null, "status": null, "execution_time": 0.010322093963623047, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.606301Z", "completed_at": "2021-11-22T12:15:22.611123Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.611487Z", "completed_at": "2021-11-22T12:15:22.611490Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * \n\nfrom {{ ref('snowplow_web_users_expected') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "expected", "snowplow_web_users_expected_stg"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_users_expected_stg", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "expected/snowplow_web_users_expected_stg.sql", "original_file_path": "models/expected/snowplow_web_users_expected_stg.sql", "name": "snowplow_web_users_expected_stg", "resource_type": "model", "alias": "snowplow_web_users_expected_stg", "checksum": {"name": "sha256", "checksum": "3ad5f26900a59e9fce24b9d76f6b829df9bf04b785b44dd2d3fc9cb6aa81afd8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_users_expected"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.snowplow_web_integration_tests.snowplow_web_users_expected"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/expected/snowplow_web_users_expected_stg.sql", "deferred": false, "compiled_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * \n\nfrom `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected"}, "error": null, "status": null, "execution_time": 0.020565032958984375, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.611588Z", "completed_at": "2021-11-22T12:15:22.631358Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.631586Z", "completed_at": "2021-11-22T12:15:22.631590Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equal_rowcount(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equal_rowcount", "kwargs": {"compare_model": "ref('snowplow_web_base_quarantined_sessions_expected_stg')", "model": "{{ ref('snowplow_web_base_quarantined_sessions_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_914e9abdbc2ca745d414234c932b17cc.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_base_quarantined_sessions_expected_stg"], ["snowplow_web_base_quarantined_sessions_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equal_rowcount_snowplow_web_base_quarantined_sessions_actual_914e9abdbc2ca745d414234c932b17cc.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.016431808471679688, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.616359Z", "completed_at": "2021-11-22T12:15:22.632129Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:22.632277Z", "completed_at": "2021-11-22T12:15:22.632280Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('snowplow_web_base_quarantined_sessions_expected_stg')", "model": "{{ ref('snowplow_web_base_quarantined_sessions_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_914e9abdbc2ca745d414234c932b17cc.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_ref_snowplow_web_base_quarantined_sessions_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_base_quarantined_sessions_expected_stg"], ["snowplow_web_base_quarantined_sessions_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_base_quarantined_sessions_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equality_snowplow_web_base_quarantined_sessions_actual_914e9abdbc2ca745d414234c932b17cc.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected_stg\n\n),\n\na_minus_b as (\n\n    select `session_id` from a\n    \n\n    except distinct\n\n\n    select `session_id` from b\n\n),\n\nb_minus_a as (\n\n    select `session_id` from b\n    \n\n    except distinct\n\n\n    select `session_id` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_base_quarantined_sessions_expected_stg\n\n),\n\na_minus_b as (\n\n    select `session_id` from a\n    \n\n    except distinct\n\n\n    select `session_id` from b\n\n),\n\nb_minus_a as (\n\n    select `session_id` from b\n    \n\n    except distinct\n\n\n    select `session_id` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.773585319519043, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.616437Z", "completed_at": "2021-11-22T12:15:23.388855Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:23.389286Z", "completed_at": "2021-11-22T12:15:23.389299Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\n   materialized=\"table\",\n   post_hook=[\"{{snowplow_utils.print_run_limits(this)}}\"]\n   )\n}}\n\n\n{%- set models_in_run = snowplow_utils.get_enabled_snowplow_models('snowplow_web') -%}\n\n{% set min_last_success,\n         max_last_success, \n         models_matched_from_manifest,\n         has_matched_all_models = snowplow_utils.get_incremental_manifest_status(ref('snowplow_web_incremental_manifest'),\n                                                                                 models_in_run) -%}\n\n\n{% set run_limits_query = snowplow_utils.get_run_limits(min_last_success, \n                                                          max_last_success,\n                                                          models_matched_from_manifest,\n                                                          has_matched_all_models,\n                                                          var(\"snowplow__start_date\",\"2020-01-01\")) -%}\n\n\n{{ run_limits_query }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "base", "scratch", "snowplow_web_base_new_event_limits"], "unique_id": "model.snowplow_web.snowplow_web_base_new_event_limits", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/scratch/snowplow_web_base_new_event_limits.sql", "original_file_path": "models/base/scratch/snowplow_web_base_new_event_limits.sql", "name": "snowplow_web_base_new_event_limits", "resource_type": "model", "alias": "snowplow_web_base_new_event_limits", "checksum": {"name": "sha256", "checksum": "49d2c056370176f3524239af966629ce1fba5580c77ad52272f1b9df0cc6f16a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{snowplow_utils.print_run_limits(this)}}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["scratch"], "full_refresh": null}, "tags": ["scratch"], "refs": [["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_enabled_snowplow_models", "macro.snowplow_utils.get_incremental_manifest_status", "macro.snowplow_utils.get_run_limits", "macro.snowplow_utils.print_run_limits"], "nodes": ["model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "This table contains the lower and upper timestamp limits for the given run of the web model. These limits are used to select new events from the events table.", "columns": {"lower_limit": {"name": "lower_limit", "description": "The lower `collector_tstamp` limit for the run", "meta": {}, "data_type": null, "tags": []}, "upper_limit": {"name": "upper_limit", "description": "The upper `collector_tstamp` limit for the run", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/scratch/base_scratch.yml", "build_path": "target/compiled/snowplow_web/models/base/scratch/snowplow_web_base_new_event_limits.sql", "deferred": false, "compiled_sql": "\n      select \n        \n    timestamp_add(\n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  , interval -6 hour)\n as lower_limit,\n        least(\n    timestamp_add(\n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  , interval 2 day)\n, \n              \n    \n    current_timestamp\n\n) as upper_limit\n    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n      select \n        \n    timestamp_add(\n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  , interval -6 hour)\n as lower_limit,\n        least(\n    timestamp_add(\n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  , interval 2 day)\n, \n              \n    \n    current_timestamp\n\n) as upper_limit\n    "}, "error": null, "status": null, "execution_time": 1.7956368923187256, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:22.541644Z", "completed_at": "2021-11-22T12:15:24.328289Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:24.328637Z", "completed_at": "2021-11-22T12:15:24.328647Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized=var(\"snowplow__incremental_materialization\"),\n    unique_key='session_id',\n    upsert_date_key='start_tstamp',\n    sort='start_tstamp',\n    dist='session_id',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_web.cluster_by_fields_sessions_lifecycle(),\n    full_refresh=snowplow_web.allow_refresh(),\n    tags=[\"manifest\"]\n  ) \n}}\n\n-- Known edge cases:\n-- 1: Rare case with multiple domain_userid per session.\n\n{% set lower_limit, upper_limit, session_lookback_limit = snowplow_utils.return_base_new_event_limits(ref('snowplow_web_base_new_event_limits')) %}\n{% set is_run_with_new_events = snowplow_utils.is_run_with_new_events('snowplow_web') %}\n\nwith new_events_session_ids as (\n  select\n    e.domain_sessionid as session_id,\n    max(e.domain_userid) as domain_userid, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n    min(e.collector_tstamp) as start_tstamp,\n    max(e.collector_tstamp) as end_tstamp\n\n  from {{ var('snowplow__events') }} e\n\n  where\n    e.domain_sessionid is not null\n    and e.domain_sessionid not in (select session_id from {{ ref('snowplow_web_base_quarantined_sessions') }}) -- don't continue processing v.long sessions\n    and e.dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', var(\"snowplow__days_late_allowed\", 3), 'dvce_created_tstamp') }} -- don't process data that's too late\n    and e.collector_tstamp >= {{ lower_limit }}\n    and e.collector_tstamp <= {{ upper_limit }}\n    and {{ snowplow_utils.app_id_filter(var(\"snowplow__app_id\",[])) }}\n    and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n    {% if var('snowplow__derived_tstamp_partitioned', true) and target.type == 'bigquery' | as_bool() %} -- BQ only\n      and e.derived_tstamp >= {{ lower_limit }}\n      and e.derived_tstamp <= {{ upper_limit }}\n    {% endif %}\n\n  group by 1\n  )\n\n{% if snowplow_utils.snowplow_is_incremental() %} \n\n, previous_sessions as (\n  select *\n\n  from {{ this }}\n\n  where start_tstamp >= {{ session_lookback_limit }}\n  and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n)\n\n, session_lifecycle as (\n  select\n    ns.session_id,\n    coalesce(self.domain_userid, ns.domain_userid) as domain_userid, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n    least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n    greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n    \n  from new_events_session_ids ns\n  left join previous_sessions as self\n    on ns.session_id = self.session_id\n\n  where\n    self.session_id is null -- process all new sessions\n    or self.end_tstamp < {{ snowplow_utils.timestamp_add('day', var(\"snowplow__max_session_days\", 3), 'self.start_tstamp') }} --stop updating sessions exceeding 3 days\n  )\n\n{% else %}\n\n, session_lifecycle as (\n\n  select * from new_events_session_ids\n\n)\n\n{% endif %}\n\nselect\n  sl.session_id,\n  sl.domain_userid,\n  sl.start_tstamp,\n  least({{ snowplow_utils.timestamp_add('day', var(\"snowplow__max_session_days\", 3), 'sl.start_tstamp') }}, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n\nfrom session_lifecycle sl", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snowplow_manifest", "fqn": ["snowplow_web", "base", "manifest", "snowplow_web_base_sessions_lifecycle_manifest"], "unique_id": "model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/manifest/snowplow_web_base_sessions_lifecycle_manifest.sql", "original_file_path": "models/base/manifest/snowplow_web_base_sessions_lifecycle_manifest.sql", "name": "snowplow_web_base_sessions_lifecycle_manifest", "resource_type": "model", "alias": "snowplow_web_base_sessions_lifecycle_manifest", "checksum": {"name": "sha256", "checksum": "45856bbf5abd086baa968b8fffc87834a775f8da268701cf862af1a4d617e884"}, "config": {"enabled": true, "materialized": "snowplow_incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snowplow_manifest", "database": null, "tags": ["manifest"], "full_refresh": false, "cluster_by": ["session_id"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "unique_key": "session_id", "upsert_date_key": "start_tstamp", "sort": "start_tstamp", "dist": "session_id"}, "tags": ["manifest"], "refs": [["snowplow_web_base_new_event_limits"], ["snowplow_web_base_new_event_limits"], ["snowplow_web_incremental_manifest"], ["snowplow_web_events_stg"], ["snowplow_web_base_quarantined_sessions"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.cluster_by_fields_sessions_lifecycle", "macro.snowplow_web.allow_refresh", "macro.snowplow_utils.return_base_new_event_limits", "macro.snowplow_utils.is_run_with_new_events", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter", "macro.snowplow_utils.snowplow_is_incremental"], "nodes": ["model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_incremental_manifest", "model.snowplow_web_integration_tests.snowplow_web_events_stg", "model.snowplow_web.snowplow_web_base_quarantined_sessions"]}, "description": "This incremental table is a manifest of all sessions that have been processed by the Snowplow dbt web model. For each session, the start and end timestamp is recorded. \n\nBy knowing the lifecycle of a session the model is able to able to determine which sessions and thus events to process for a given timeframe, as well as the complete date range required to reprocess all events of each session.", "columns": {"session_id": {"name": "session_id", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "The `collector_tstamp` when the session began", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "The `collector_tstamp` when the session ended", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/manifest/base_manifest.yml", "build_path": "target/compiled/snowplow_web/models/base/manifest/snowplow_web_base_sessions_lifecycle_manifest.sql", "deferred": false, "compiled_sql": "\n\n-- Known edge cases:\n-- 1: Rare case with multiple domain_userid per session.\n\n\n\n\nwith new_events_session_ids as (\n  select\n    e.domain_sessionid as session_id,\n    max(e.domain_userid) as domain_userid, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n    min(e.collector_tstamp) as start_tstamp,\n    max(e.collector_tstamp) as end_tstamp\n\n  from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events_stg e\n\n  where\n    e.domain_sessionid is not null\n    and e.domain_sessionid not in (select session_id from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions) -- don't continue processing v.long sessions\n    and e.dvce_sent_tstamp <= \n    timestamp_add(dvce_created_tstamp, interval 3 day)\n -- don't process data that's too late\n    and e.collector_tstamp >= \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  \n    and e.collector_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n    and true\n    and cast(0 as boolean) --don't reprocess sessions that have already been processed.\n     -- BQ only\n      and e.derived_tstamp >= \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  \n      and e.derived_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n    \n\n  group by 1\n  )\n\n \n\n, previous_sessions as (\n  select *\n\n  from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\n\n  where start_tstamp >= \n    cast('2021-02-24 00:00:00+00:00' as \n    timestamp\n)\n  \n  and cast(0 as boolean) --don't reprocess sessions that have already been processed.\n)\n\n, session_lifecycle as (\n  select\n    ns.session_id,\n    coalesce(self.domain_userid, ns.domain_userid) as domain_userid, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n    least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n    greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n    \n  from new_events_session_ids ns\n  left join previous_sessions as self\n    on ns.session_id = self.session_id\n\n  where\n    self.session_id is null -- process all new sessions\n    or self.end_tstamp < \n    timestamp_add(self.start_tstamp, interval 3 day)\n --stop updating sessions exceeding 3 days\n  )\n\n\n\nselect\n  sl.session_id,\n  sl.domain_userid,\n  sl.start_tstamp,\n  least(\n    timestamp_add(sl.start_tstamp, interval 3 day)\n, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n\nfrom session_lifecycle sl", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- Known edge cases:\n-- 1: Rare case with multiple domain_userid per session.\n\n\n\n\nwith new_events_session_ids as (\n  select\n    e.domain_sessionid as session_id,\n    max(e.domain_userid) as domain_userid, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n    min(e.collector_tstamp) as start_tstamp,\n    max(e.collector_tstamp) as end_tstamp\n\n  from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events_stg e\n\n  where\n    e.domain_sessionid is not null\n    and e.domain_sessionid not in (select session_id from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_quarantined_sessions) -- don't continue processing v.long sessions\n    and e.dvce_sent_tstamp <= \n    timestamp_add(dvce_created_tstamp, interval 3 day)\n -- don't process data that's too late\n    and e.collector_tstamp >= \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  \n    and e.collector_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n    and true\n    and cast(0 as boolean) --don't reprocess sessions that have already been processed.\n     -- BQ only\n      and e.derived_tstamp >= \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  \n      and e.derived_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n    \n\n  group by 1\n  )\n\n \n\n, previous_sessions as (\n  select *\n\n  from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\n\n  where start_tstamp >= \n    cast('2021-02-24 00:00:00+00:00' as \n    timestamp\n)\n  \n  and cast(0 as boolean) --don't reprocess sessions that have already been processed.\n)\n\n, session_lifecycle as (\n  select\n    ns.session_id,\n    coalesce(self.domain_userid, ns.domain_userid) as domain_userid, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n    least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n    greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n    \n  from new_events_session_ids ns\n  left join previous_sessions as self\n    on ns.session_id = self.session_id\n\n  where\n    self.session_id is null -- process all new sessions\n    or self.end_tstamp < \n    timestamp_add(self.start_tstamp, interval 3 day)\n --stop updating sessions exceeding 3 days\n  )\n\n\n\nselect\n  sl.session_id,\n  sl.domain_userid,\n  sl.start_tstamp,\n  least(\n    timestamp_add(sl.start_tstamp, interval 3 day)\n, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n\nfrom session_lifecycle sl"}, "error": null, "status": null, "execution_time": 2.5592410564422607, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:24.330840Z", "completed_at": "2021-11-22T12:15:26.889084Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:26.889373Z", "completed_at": "2021-11-22T12:15:26.889388Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_base_sessions_lifecycle_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_base_sessions_lifecycle_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.03751802444458008, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:26.892212Z", "completed_at": "2021-11-22T12:15:26.927720Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:26.928160Z", "completed_at": "2021-11-22T12:15:26.928166Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_sessions_lifecycle_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id", "resource_type": "test", "alias": "not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_sessions_lifecycle_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.03832101821899414, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:26.892299Z", "completed_at": "2021-11-22T12:15:26.928340Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:26.929399Z", "completed_at": "2021-11-22T12:15:26.929403Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_base_sessions_lifecycle_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_base_sessions_lifecycle_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.03831982612609863, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:26.904943Z", "completed_at": "2021-11-22T12:15:26.929099Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:26.929778Z", "completed_at": "2021-11-22T12:15:26.929782Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_sessions_lifecycle_manifest') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_base_sessions_lifecycle_manifest_session_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_base_sessions_lifecycle_manifest_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_base_sessions_lifecycle_manifest_session_id.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "name": "unique_snowplow_web_base_sessions_lifecycle_manifest_session_id", "resource_type": "test", "alias": "unique_snowplow_web_base_sessions_lifecycle_manifest_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_sessions_lifecycle_manifest"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/manifest/base_manifest.yml/schema_test/unique_snowplow_web_base_sessions_lifecycle_manifest_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.007613182067871094, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:26.930516Z", "completed_at": "2021-11-22T12:15:26.937353Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:26.937525Z", "completed_at": "2021-11-22T12:15:26.937529Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    sort='start_tstamp',\n    dist='session_id',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"session_id\"]),\n    tags=[\"this_run\"],\n    post_hook=[\n    \"{{ snowplow_utils.quarantine_sessions('snowplow_web', var('snowplow__max_session_days')) }}\"\n    ]\n  ) \n}}\n\n{%- set lower_limit, \n        upper_limit,\n        session_lookback_limit = snowplow_utils.return_base_new_event_limits(ref('snowplow_web_base_new_event_limits')) %}\n\nselect\n  s.session_id,\n  s.domain_userid,\n  s.start_tstamp,\n  -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit. \n  -- This ensures we don't accidentally process events after upper_limit\n  case when s.end_tstamp > {{ upper_limit }} then {{ upper_limit }} else s.end_tstamp end as end_tstamp \n\nfrom {{ ref('snowplow_web_base_sessions_lifecycle_manifest')}} s\n\nwhere\n-- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n-- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\ns.start_tstamp >= {{ session_lookback_limit }}\nand s.start_tstamp <= {{ upper_limit }}\n-- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\nand not (s.start_tstamp > {{ upper_limit }} or s.end_tstamp < {{ lower_limit }})", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "base", "scratch", "snowplow_web_base_sessions_this_run"], "unique_id": "model.snowplow_web.snowplow_web_base_sessions_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/scratch/snowplow_web_base_sessions_this_run.sql", "original_file_path": "models/base/scratch/snowplow_web_base_sessions_this_run.sql", "name": "snowplow_web_base_sessions_this_run", "resource_type": "model", "alias": "snowplow_web_base_sessions_this_run", "checksum": {"name": "sha256", "checksum": "e617627afa47b8471fafe32a1f700f66c39e3e4a87122ae2f01cbf9091f7d33b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ snowplow_utils.quarantine_sessions('snowplow_web', var('snowplow__max_session_days')) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["scratch", "this_run"], "full_refresh": null, "cluster_by": ["session_id"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "start_tstamp", "dist": "session_id"}, "tags": ["scratch", "this_run"], "refs": [["snowplow_web_base_new_event_limits"], ["snowplow_web_base_sessions_lifecycle_manifest"], ["snowplow_web_base_quarantined_sessions"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by", "macro.snowplow_utils.return_base_new_event_limits", "macro.snowplow_utils.quarantine_sessions"], "nodes": ["model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest", "model.snowplow_web.snowplow_web_base_quarantined_sessions"]}, "description": "For any given run, this table contains all the required sessions.", "columns": {"session_id": {"name": "session_id", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "The `collector_tstamp` when the session began", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "The `collector_tstamp` when the session ended", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/scratch/base_scratch.yml", "build_path": "target/compiled/snowplow_web/models/base/scratch/snowplow_web_base_sessions_this_run.sql", "deferred": false, "compiled_sql": "\n\nselect\n  s.session_id,\n  s.domain_userid,\n  s.start_tstamp,\n  -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit. \n  -- This ensures we don't accidentally process events after upper_limit\n  case when s.end_tstamp > \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   then \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   else s.end_tstamp end as end_tstamp \n\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest s\n\nwhere\n-- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n-- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\ns.start_tstamp >= \n    cast('2021-02-24 00:00:00+00:00' as \n    timestamp\n)\n  \nand s.start_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n-- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\nand not (s.start_tstamp > \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   or s.end_tstamp < \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  s.session_id,\n  s.domain_userid,\n  s.start_tstamp,\n  -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit. \n  -- This ensures we don't accidentally process events after upper_limit\n  case when s.end_tstamp > \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   then \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   else s.end_tstamp end as end_tstamp \n\nfrom `com-snplow-eng-gcp`.dbt_will_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest s\n\nwhere\n-- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n-- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\ns.start_tstamp >= \n    cast('2021-02-24 00:00:00+00:00' as \n    timestamp\n)\n  \nand s.start_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n-- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\nand not (s.start_tstamp > \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n   or s.end_tstamp < \n    cast('2021-02-27 00:00:00+00:00' as \n    timestamp\n)\n  )"}, "error": null, "status": null, "execution_time": 1.2556519508361816, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:26.891916Z", "completed_at": "2021-11-22T12:15:28.145713Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:28.146125Z", "completed_at": "2021-11-22T12:15:28.146141Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_base_sessions_this_run_session_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_base_sessions_this_run_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_base_sessions_this_run_session_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "name": "unique_snowplow_web_base_sessions_this_run_session_id", "resource_type": "test", "alias": "unique_snowplow_web_base_sessions_this_run_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/scratch/base_scratch.yml/schema_test/unique_snowplow_web_base_sessions_this_run_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        session_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\n    where session_id is not null\n    group by session_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.07004022598266602, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:28.162539Z", "completed_at": "2021-11-22T12:15:28.218803Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:28.219103Z", "completed_at": "2021-11-22T12:15:28.219109Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_web_base_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_sessions_this_run_session_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_this_run_session_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_sessions_this_run_session_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "name": "not_null_snowplow_web_base_sessions_this_run_session_id", "resource_type": "test", "alias": "not_null_snowplow_web_base_sessions_this_run_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/scratch/base_scratch.yml/schema_test/not_null_snowplow_web_base_sessions_this_run_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.0708160400390625, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:28.149843Z", "completed_at": "2021-11-22T12:15:28.218984Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:28.219303Z", "completed_at": "2021-11-22T12:15:28.219306Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    partition_by = {\n      \"field\": \"collector_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=[\"event_name\",\"page_view_id\"],\n    tags=[\"this_run\"]\n  ) \n}}\n\n{%- set lower_limit, upper_limit = snowplow_utils.return_limits_from_model(ref('snowplow_web_base_sessions_this_run'),\n                                                                          'start_tstamp',\n                                                                          'end_tstamp') %}\n\n-- without downstream joins, it's safe to dedupe by picking the first event_id found.\nselect\n  array_agg(e order by e.collector_tstamp limit 1)[offset(0)].*\n\nfrom (\n\n  select\n    a.contexts_com_snowplowanalytics_snowplow_web_page_1_0_0[safe_offset(0)].id as page_view_id,\n    b.domain_userid, -- take domain_userid from manifest. This ensures only 1 domain_userid per session.\n    a.* except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0, domain_userid)\n\n  from {{ var('snowplow__events') }} as a\n  inner join {{ ref('snowplow_web_base_sessions_this_run') }} as b\n  on a.domain_sessionid = b.session_id\n\n  where a.collector_tstamp <= {{ snowplow_utils.timestamp_add('day', var(\"snowplow__max_session_days\", 3), 'b.start_tstamp') }}\n  and a.dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', var(\"snowplow__days_late_allowed\", 3), 'a.dvce_created_tstamp') }}\n  and a.collector_tstamp >= {{ lower_limit }}\n  and a.collector_tstamp <= {{ upper_limit }}\n  {% if var('snowplow__derived_tstamp_partitioned', true) and target.type == 'bigquery' | as_bool() %}\n    and a.derived_tstamp >= {{ lower_limit }}\n    and a.derived_tstamp <= {{ upper_limit }}\n  {% endif %}\n  and {{ snowplow_utils.app_id_filter(var(\"snowplow__app_id\",[])) }}\n\n) e\ngroup by e.event_id", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "base", "scratch", "bigquery", "snowplow_web_base_events_this_run"], "unique_id": "model.snowplow_web.snowplow_web_base_events_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "base/scratch/bigquery/snowplow_web_base_events_this_run.sql", "original_file_path": "models/base/scratch/bigquery/snowplow_web_base_events_this_run.sql", "name": "snowplow_web_base_events_this_run", "resource_type": "model", "alias": "snowplow_web_base_events_this_run", "checksum": {"name": "sha256", "checksum": "d1e317016f91b6be44df65bc7611c35e7c2d9029d69b5f571dccd60b38214b9d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["scratch", "this_run"], "full_refresh": null, "cluster_by": ["event_name", "page_view_id"], "partition_by": {"field": "collector_tstamp", "data_type": "timestamp"}}, "tags": ["scratch", "this_run"], "refs": [["snowplow_web_base_sessions_this_run"], ["snowplow_web_events_stg"], ["snowplow_web_base_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.return_limits_from_model", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_this_run", "model.snowplow_web_integration_tests.snowplow_web_events_stg", "model.snowplow_web.snowplow_web_base_sessions_this_run"]}, "description": "For any given run, this table contains all required events to be consumed by subsequent nodes in the Snowplow dbt web package. This is a cleaned, deduped dataset, containing all columns from the raw events table as well as having the `page_view_id` joined in from the page view context. \n\n**Note: This table should be used as the input to any custom modules that require event level data, rather than selecting straight from `atomic.events`**", "columns": {"app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "tags": []}, "platform": {"name": "platform", "description": "Platform e.g. \u2018web\u2019", "meta": {}, "data_type": null, "tags": []}, "etl_tstamp": {"name": "etl_tstamp", "description": "Timestamp event began ETL e.g. \u20182017-01-26 00:01:25.292\u2019", "meta": {}, "data_type": null, "tags": []}, "collector_tstamp": {"name": "collector_tstamp", "description": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "tags": []}, "dvce_created_tstamp": {"name": "dvce_created_tstamp", "description": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "The type of event recorded e.g. \u2018page_view\u2019", "meta": {}, "data_type": null, "tags": []}, "event_id": {"name": "event_id", "description": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "txn_id": {"name": "txn_id", "description": "Transaction ID set client-side, used to de-dupe records e.g. 421828", "meta": {}, "data_type": null, "tags": []}, "name_tracker": {"name": "name_tracker", "description": "Tracker namespace e.g. \u2018sp1\u2019", "meta": {}, "data_type": null, "tags": []}, "v_tracker": {"name": "v_tracker", "description": "Tracker version e.g. \u2018js-3.0.0\u2019", "meta": {}, "data_type": null, "tags": []}, "v_collector": {"name": "v_collector", "description": "Collector version e.g. \u2018ssc-2.1.0-kinesis\u2019", "meta": {}, "data_type": null, "tags": []}, "v_etl": {"name": "v_etl", "description": "ETL version e.g. \u2018snowplow-micro-1.1.0-common-1.4.2\u2019", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "tags": []}, "user_fingerprint": {"name": "user_fingerprint", "description": "A user fingerprint generated by looking at the individual browser features e.g. 2161814971", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "tags": []}, "ip_isp": {"name": "ip_isp", "description": "Visitor\u2019s ISP e.g. \u2018FDN Communications\u2019", "meta": {}, "data_type": null, "tags": []}, "ip_organization": {"name": "ip_organization", "description": "Organization associated with the visitor\u2019s IP address \u2013 defaults to ISP name if none is found e.g. \u2018Bouygues Telecom\u2019", "meta": {}, "data_type": null, "tags": []}, "ip_domain": {"name": "ip_domain", "description": "Second level domain name associated with the visitor\u2019s IP address e.g. \u2018nuvox.net\u2019", "meta": {}, "data_type": null, "tags": []}, "ip_netspeed": {"name": "ip_netspeed", "description": "Visitor\u2019s connection type e.g. \u2018Cable/DSL\u2019", "meta": {}, "data_type": null, "tags": []}, "page_url": {"name": "page_url", "description": "The page URL e.g. \u2018http://www.example.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_title": {"name": "page_title", "description": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019", "meta": {}, "data_type": null, "tags": []}, "page_referrer": {"name": "page_referrer", "description": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlscheme": {"name": "page_urlscheme", "description": "Scheme aka protocol e.g. \u2018https\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlhost": {"name": "page_urlhost", "description": "Host aka domain e.g. \u2018\u201cwww.snowplowanalytics.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlport": {"name": "page_urlport", "description": "Port if specified, 80 if not 80", "meta": {}, "data_type": null, "tags": []}, "page_urlpath": {"name": "page_urlpath", "description": "Path to page e.g. \u2018/product/index.html\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlquery": {"name": "page_urlquery", "description": "Querystring e.g. \u2018id=GTM-DLRG\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlfragment": {"name": "page_urlfragment", "description": "Fragment aka anchor e.g. \u20184-conclusion\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlport": {"name": "refr_urlport", "description": "Referer port e.g. 80", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "se_category": {"name": "se_category", "description": "Category of event e.g. \u2018ecomm\u2019, \u2018video\u2019", "meta": {}, "data_type": null, "tags": []}, "se_action": {"name": "se_action", "description": "Action performed / event name e.g. \u2018add-to-basket\u2019, \u2018play-video\u2019", "meta": {}, "data_type": null, "tags": []}, "se_label": {"name": "se_label", "description": "The object of the action e.g. the ID of the video played or SKU of the product added-to-basket e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "tags": []}, "se_property": {"name": "se_property", "description": "A property associated with the object of the action e.g. \u2018HD\u2019, \u2018large\u2019", "meta": {}, "data_type": null, "tags": []}, "se_value": {"name": "se_value", "description": "A value associated with the event / action e.g. the value of goods added-to-basket e.g. 9.99", "meta": {}, "data_type": null, "tags": []}, "tr_orderid": {"name": "tr_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "tags": []}, "tr_affiliation": {"name": "tr_affiliation", "description": "Transaction affiliation (e.g. store where sale took place) e.g. \u2018web\u2019", "meta": {}, "data_type": null, "tags": []}, "tr_total": {"name": "tr_total", "description": "Total transaction value e.g. 12.99", "meta": {}, "data_type": null, "tags": []}, "tr_tax": {"name": "tr_tax", "description": "Total tax included in transaction value e.g. 3.00", "meta": {}, "data_type": null, "tags": []}, "tr_shipping": {"name": "tr_shipping", "description": "Delivery cost charged e.g. 0.00", "meta": {}, "data_type": null, "tags": []}, "tr_city": {"name": "tr_city", "description": "Delivery address, city e.g. \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "tr_state": {"name": "tr_state", "description": "Delivery address, state e.g. \u2018Washington\u2019", "meta": {}, "data_type": null, "tags": []}, "tr_country": {"name": "tr_country", "description": "Delivery address, country e.g. \u2018France\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_orderid": {"name": "ti_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_sku": {"name": "ti_sku", "description": "Product SKU e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_name": {"name": "ti_name", "description": "Product name e.g. \u2018Cone pendulum\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_category": {"name": "ti_category", "description": "Product category e.g. \u2018New Age\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_price": {"name": "ti_price", "description": "Product unit price e.g. 9.99", "meta": {}, "data_type": null, "tags": []}, "ti_quantity": {"name": "ti_quantity", "description": "Number of product in transaction e.g. 2", "meta": {}, "data_type": null, "tags": []}, "pp_xoffset_min": {"name": "pp_xoffset_min", "description": "Minimum page x offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "tags": []}, "pp_xoffset_max": {"name": "pp_xoffset_max", "description": "Maximum page x offset seen in the last ping period e.g. 100", "meta": {}, "data_type": null, "tags": []}, "pp_yoffset_min": {"name": "pp_yoffset_min", "description": "Minimum page y offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "tags": []}, "pp_yoffset_max": {"name": "pp_yoffset_max", "description": "Maximum page y offset seen in the last ping period e.g. 200", "meta": {}, "data_type": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "tags": []}, "br_name": {"name": "br_name", "description": "Browser name e.g. \u2018Firefox 12\u2019", "meta": {}, "data_type": null, "tags": []}, "br_family": {"name": "br_family", "description": "Browser family e.g. \u2018Firefox\u2019", "meta": {}, "data_type": null, "tags": []}, "br_version": {"name": "br_version", "description": "Browser version e.g. \u201812.0\u2019", "meta": {}, "data_type": null, "tags": []}, "br_type": {"name": "br_type", "description": "Browser type e.g. \u2018Browser\u2019", "meta": {}, "data_type": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "tags": []}, "br_features_pdf": {"name": "br_features_pdf", "description": "Whether the browser recognizes PDFs e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_flash": {"name": "br_features_flash", "description": "Whether Flash is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_java": {"name": "br_features_java", "description": "Whether Java is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_director": {"name": "br_features_director", "description": "Whether Adobe Shockwave is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_quicktime": {"name": "br_features_quicktime", "description": "Whether QuickTime is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_realplayer": {"name": "br_features_realplayer", "description": "Whether RealPlayer is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_windowsmedia": {"name": "br_features_windowsmedia", "description": "Whether mplayer2 is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_gears": {"name": "br_features_gears", "description": "Whether Google Gears is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_features_silverlight": {"name": "br_features_silverlight", "description": "Whether Microsoft Silverlight is installed e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_cookies": {"name": "br_cookies", "description": "Whether cookies are enabled e.g. True", "meta": {}, "data_type": null, "tags": []}, "br_colordepth": {"name": "br_colordepth", "description": "Bit depth of the browser color palette e.g. 24", "meta": {}, "data_type": null, "tags": []}, "br_viewwidth": {"name": "br_viewwidth", "description": "Viewport width e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "br_viewheight": {"name": "br_viewheight", "description": "Viewport height e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "os_name": {"name": "os_name", "description": "Name of operating system e.g. \u2018Android\u2019", "meta": {}, "data_type": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "tags": []}, "os_manufacturer": {"name": "os_manufacturer", "description": "Company responsible for OS e.g. \u2018Apple\u2019", "meta": {}, "data_type": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "dvce_type": {"name": "dvce_type", "description": "Type of device e.g. \u2018Computer\u2019", "meta": {}, "data_type": null, "tags": []}, "dvce_ismobile": {"name": "dvce_ismobile", "description": "Is the device mobile? e.g. True", "meta": {}, "data_type": null, "tags": []}, "dvce_screenwidth": {"name": "dvce_screenwidth", "description": "Screen width in pixels e.g. 1900", "meta": {}, "data_type": null, "tags": []}, "dvce_screenheight": {"name": "dvce_screenheight", "description": "Screen height in pixels e.g. 1024", "meta": {}, "data_type": null, "tags": []}, "doc_charset": {"name": "doc_charset", "description": "The page\u2019s character encoding e.g. , \u2018UTF-8\u2019", "meta": {}, "data_type": null, "tags": []}, "doc_width": {"name": "doc_width", "description": "The page\u2019s width in pixels e.g. 1024", "meta": {}, "data_type": null, "tags": []}, "doc_height": {"name": "doc_height", "description": "The page\u2019s height in pixels e.g. 3000", "meta": {}, "data_type": null, "tags": []}, "tr_currency": {"name": "tr_currency", "description": "Currency e.g. \u2018USD\u2019", "meta": {}, "data_type": null, "tags": []}, "tr_total_base": {"name": "tr_total_base", "description": "Total in base currency e.g. 12.99", "meta": {}, "data_type": null, "tags": []}, "tr_tax_base": {"name": "tr_tax_base", "description": "Total tax in base currency e.g. 3.00", "meta": {}, "data_type": null, "tags": []}, "tr_shipping_base": {"name": "tr_shipping_base", "description": "decimal  Delivery cost in base currency e.g. 0.00", "meta": {}, "data_type": null, "tags": []}, "ti_currency": {"name": "ti_currency", "description": "Currency e.g. \u2018EUR\u2019", "meta": {}, "data_type": null, "tags": []}, "ti_price_base": {"name": "ti_price_base", "description": "decimal Price in base currency e.g. 9.99", "meta": {}, "data_type": null, "tags": []}, "base_currency": {"name": "base_currency", "description": "Reporting currency e.g. \u2018GBP\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}, "etl_tags": {"name": "etl_tags", "description": "JSON of tags for this ETL run e.g. \u201c[\u2018prod\u2019]\u201d", "meta": {}, "data_type": null, "tags": []}, "dvce_sent_tstamp": {"name": "dvce_sent_tstamp", "description": "When the event was sent by the client device e.g. \u20182013-11-26 00:03:58.032\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_domain_userid": {"name": "refr_domain_userid", "description": "The Snowplow domain_userid of the referring website e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_dvce_tstamp": {"name": "refr_dvce_tstamp", "description": "The time of attaching the domain_userid to the inbound link e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": []}, "derived_tstamp": {"name": "derived_tstamp", "description": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "tags": []}, "event_vendor": {"name": "event_vendor", "description": "Who defined the event e.g. \u2018com.acme\u2019", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name e.g. \u2018link_click\u2019", "meta": {}, "data_type": null, "tags": []}, "event_format": {"name": "event_format", "description": "Format for event e.g. \u2018jsonschema\u2019", "meta": {}, "data_type": null, "tags": []}, "event_version": {"name": "event_version", "description": "Version of event schema e.g. \u20181-0-2\u2019", "meta": {}, "data_type": null, "tags": []}, "event_fingerprint": {"name": "event_fingerprint", "description": "Hash client-set event fields e.g. AADCE520E20C2899F4CED228A79A3083", "meta": {}, "data_type": null, "tags": []}, "true_tstamp": {"name": "true_tstamp", "description": "User-set \u201ctrue timestamp\u201d for the event e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "tags": []}, "page_view_id": {"name": "page_view_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/base/scratch/base_scratch.yml", "build_path": "target/compiled/snowplow_web/models/base/scratch/bigquery/snowplow_web_base_events_this_run.sql", "deferred": false, "compiled_sql": "\n\n-- without downstream joins, it's safe to dedupe by picking the first event_id found.\nselect\n  array_agg(e order by e.collector_tstamp limit 1)[offset(0)].*\n\nfrom (\n\n  select\n    a.contexts_com_snowplowanalytics_snowplow_web_page_1_0_0[safe_offset(0)].id as page_view_id,\n    b.domain_userid, -- take domain_userid from manifest. This ensures only 1 domain_userid per session.\n    a.* except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0, domain_userid)\n\n  from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events_stg as a\n  inner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run as b\n  on a.domain_sessionid = b.session_id\n\n  where a.collector_tstamp <= \n    timestamp_add(b.start_tstamp, interval 3 day)\n\n  and a.dvce_sent_tstamp <= \n    timestamp_add(a.dvce_created_tstamp, interval 3 day)\n\n  and a.collector_tstamp >= \n    cast('2021-02-27 00:00:12.562000+00:00' as \n    timestamp\n)\n  \n  and a.collector_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n  \n    and a.derived_tstamp >= \n    cast('2021-02-27 00:00:12.562000+00:00' as \n    timestamp\n)\n  \n    and a.derived_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n  \n  and true\n\n) e\ngroup by e.event_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- without downstream joins, it's safe to dedupe by picking the first event_id found.\nselect\n  array_agg(e order by e.collector_tstamp limit 1)[offset(0)].*\n\nfrom (\n\n  select\n    a.contexts_com_snowplowanalytics_snowplow_web_page_1_0_0[safe_offset(0)].id as page_view_id,\n    b.domain_userid, -- take domain_userid from manifest. This ensures only 1 domain_userid per session.\n    a.* except(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0, domain_userid)\n\n  from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_events_stg as a\n  inner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run as b\n  on a.domain_sessionid = b.session_id\n\n  where a.collector_tstamp <= \n    timestamp_add(b.start_tstamp, interval 3 day)\n\n  and a.dvce_sent_tstamp <= \n    timestamp_add(a.dvce_created_tstamp, interval 3 day)\n\n  and a.collector_tstamp >= \n    cast('2021-02-27 00:00:12.562000+00:00' as \n    timestamp\n)\n  \n  and a.collector_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n  \n    and a.derived_tstamp >= \n    cast('2021-02-27 00:00:12.562000+00:00' as \n    timestamp\n)\n  \n    and a.derived_tstamp <= \n    cast('2021-03-13 23:59:01.168000+00:00' as \n    timestamp\n)\n  \n  \n  and true\n\n) e\ngroup by e.event_id"}, "error": null, "status": null, "execution_time": 1.3166961669921875, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:28.149304Z", "completed_at": "2021-11-22T12:15:29.464038Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.464452Z", "completed_at": "2021-11-22T12:15:29.464482Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"page_view_id\"]),\n    sort='page_view_id',\n    dist='page_view_id'\n  ) \n}}\n\nselect\n  ev.page_view_id,\n  max(ev.derived_tstamp) as end_tstamp,\n\n  -- aggregate pings:\n    -- divides epoch tstamps by snowplow__heartbeat to get distinct intervals\n    -- floor rounds to nearest integer - duplicates all evaluate to the same number\n    -- count(distinct) counts duplicates only once\n    -- adding snowplow__min_visit_length accounts for the page view event itself.\n\n  {{ var(\"snowplow__heartbeat\", 10) }} * (count(distinct(floor({{ snowplow_utils.to_unixtstamp('ev.derived_tstamp') }}/{{ var(\"snowplow__heartbeat\", 10) }}))) - 1) + {{ var(\"snowplow__min_visit_length\", 5) }} as engaged_time_in_s\n\nfrom {{ ref('snowplow_web_base_events_this_run') }} as ev\n\nwhere ev.event_name = 'page_ping'\nand ev.page_view_id is not null\n\ngroup by 1", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "page_views", "scratch", "snowplow_web_pv_engaged_time"], "unique_id": "model.snowplow_web.snowplow_web_pv_engaged_time", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "page_views/scratch/snowplow_web_pv_engaged_time.sql", "original_file_path": "models/page_views/scratch/snowplow_web_pv_engaged_time.sql", "name": "snowplow_web_pv_engaged_time", "resource_type": "model", "alias": "snowplow_web_pv_engaged_time", "checksum": {"name": "sha256", "checksum": "e1b7861a7ff0f4f3d8afd367084f92a6adc39dcc7c9f66904701ebd89770d60c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["page_view_id"], "sort": "page_view_id", "dist": "page_view_id"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_base_events_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by", "macro.snowplow_utils.to_unixtstamp"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run"]}, "description": "This model calculates the time a visitor spent engaged on a given page view. This is calculated using the number of page ping events received for that page view.", "columns": {"page_view_id": {"name": "page_view_id", "description": "A UUID for each page view e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/page_views/scratch/page_views_scratch.yml", "build_path": "target/compiled/snowplow_web/models/page_views/scratch/snowplow_web_pv_engaged_time.sql", "deferred": false, "compiled_sql": "\n\nselect\n  ev.page_view_id,\n  max(ev.derived_tstamp) as end_tstamp,\n\n  -- aggregate pings:\n    -- divides epoch tstamps by snowplow__heartbeat to get distinct intervals\n    -- floor rounds to nearest integer - duplicates all evaluate to the same number\n    -- count(distinct) counts duplicates only once\n    -- adding snowplow__min_visit_length accounts for the page view event itself.\n\n  10 * (count(distinct(floor(unix_seconds(ev.derived_tstamp)/10))) - 1) + 5 as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as ev\n\nwhere ev.event_name = 'page_ping'\nand ev.page_view_id is not null\n\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  ev.page_view_id,\n  max(ev.derived_tstamp) as end_tstamp,\n\n  -- aggregate pings:\n    -- divides epoch tstamps by snowplow__heartbeat to get distinct intervals\n    -- floor rounds to nearest integer - duplicates all evaluate to the same number\n    -- count(distinct) counts duplicates only once\n    -- adding snowplow__min_visit_length accounts for the page view event itself.\n\n  10 * (count(distinct(floor(unix_seconds(ev.derived_tstamp)/10))) - 1) + 5 as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as ev\n\nwhere ev.event_name = 'page_ping'\nand ev.page_view_id is not null\n\ngroup by 1"}, "error": null, "status": null, "execution_time": 0.04479217529296875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.467148Z", "completed_at": "2021-11-22T12:15:29.510121Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.511060Z", "completed_at": "2021-11-22T12:15:29.511067Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ snowplow_utils.snowplow_incremental_post_hook('snowplow_web') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "hooks", "snowplow_web-on-run-end-0"], "unique_id": "operation.snowplow_web.snowplow_web-on-run-end-0", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "hooks/snowplow_web-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "snowplow_web-on-run-end-0", "resource_type": "operation", "alias": "snowplow_web-on-run-end-0", "checksum": {"name": "sha256", "checksum": "3e423cf18aee1d60e89018250c35e5bd68a0d08d36cd86cf368107d192538700"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": ["on-run-end"], "refs": [["snowplow_web_incremental_manifest"], ["snowplow_web_base_events_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.snowplow_incremental_post_hook"], "nodes": ["model.snowplow_web.snowplow_web_incremental_manifest", "model.snowplow_web.snowplow_web_base_events_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/./dbt_project.yml/hooks/snowplow_web-on-run-end-0.sql", "deferred": false, "compiled_sql": "\n  \n                    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n  \n                    \n\n", "index": 0}, "error": null, "status": null, "execution_time": 0.04098176956176758, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.489210Z", "completed_at": "2021-11-22T12:15:29.517746Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.520496Z", "completed_at": "2021-11-22T12:15:29.520501Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"page_view_id\"]),\n    sort='page_view_id',\n    dist='page_view_id'\n  ) \n}}\n\nwith prep as (\n  select\n    ev.page_view_id,\n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n\n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from {{ ref('snowplow_web_base_events_this_run') }} as ev\n\n  where ev.event_name in ('page_view', 'page_ping')\n    and ev.page_view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1\n)\n\nselect\n  page_view_id,\n\n  doc_width,\n  doc_height,\n\n  br_viewwidth,\n  br_viewheight,\n\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as {{ dbt_utils.type_float() }}))) as {{ dbt_utils.type_float() }}) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as {{ dbt_utils.type_float() }}))) as {{ dbt_utils.type_float() }}) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as {{ dbt_utils.type_float() }}))) as {{ dbt_utils.type_float() }}) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as {{ dbt_utils.type_float() }}))) as {{ dbt_utils.type_float() }}) as relative_vmax -- not zero when a user hasn't scrolled because it includes the non-zero viewheight\n\nfrom prep", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "page_views", "scratch", "snowplow_web_pv_scroll_depth"], "unique_id": "model.snowplow_web.snowplow_web_pv_scroll_depth", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "page_views/scratch/snowplow_web_pv_scroll_depth.sql", "original_file_path": "models/page_views/scratch/snowplow_web_pv_scroll_depth.sql", "name": "snowplow_web_pv_scroll_depth", "resource_type": "model", "alias": "snowplow_web_pv_scroll_depth", "checksum": {"name": "sha256", "checksum": "215d641328a2f4a5c487774a497f3b0c93fa78ee78f87e72484646183365e8a0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["page_view_id"], "sort": "page_view_id", "dist": "page_view_id"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_base_events_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by", "macro.dbt_utils.type_float"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run"]}, "description": "This model calculates the horizontal and vertical scroll depth of the vistor on a given page view. Such metrics are useful when assessing engagement on a page view.", "columns": {"page_view_id": {"name": "page_view_id", "description": "A UUID for each page view e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/page_views/scratch/page_views_scratch.yml", "build_path": "target/compiled/snowplow_web/models/page_views/scratch/snowplow_web_pv_scroll_depth.sql", "deferred": false, "compiled_sql": "\n\nwith prep as (\n  select\n    ev.page_view_id,\n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n\n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as ev\n\n  where ev.event_name in ('page_view', 'page_ping')\n    and ev.page_view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1\n)\n\nselect\n  page_view_id,\n\n  doc_width,\n  doc_height,\n\n  br_viewwidth,\n  br_viewheight,\n\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as \n    float64\n))) as \n    float64\n) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as \n    float64\n))) as \n    float64\n) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as \n    float64\n))) as \n    float64\n) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as \n    float64\n))) as \n    float64\n) as relative_vmax -- not zero when a user hasn't scrolled because it includes the non-zero viewheight\n\nfrom prep", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith prep as (\n  select\n    ev.page_view_id,\n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n\n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as ev\n\n  where ev.event_name in ('page_view', 'page_ping')\n    and ev.page_view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1\n)\n\nselect\n  page_view_id,\n\n  doc_width,\n  doc_height,\n\n  br_viewwidth,\n  br_viewheight,\n\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as \n    float64\n))) as \n    float64\n) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as \n    float64\n))) as \n    float64\n) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as \n    float64\n))) as \n    float64\n) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as \n    float64\n))) as \n    float64\n) as relative_vmax -- not zero when a user hasn't scrolled because it includes the non-zero viewheight\n\nfrom prep"}, "error": null, "status": null, "execution_time": 0.06671905517578125, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.489025Z", "completed_at": "2021-11-22T12:15:29.533926Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.534079Z", "completed_at": "2021-11-22T12:15:29.534084Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_base_events_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_base_events_this_run_event_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_base_events_this_run_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_base_events_this_run_event_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "name": "not_null_snowplow_web_base_events_this_run_event_id", "resource_type": "test", "alias": "not_null_snowplow_web_base_events_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_events_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/scratch/base_scratch.yml/schema_test/not_null_snowplow_web_base_events_this_run_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.023574113845825195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.517897Z", "completed_at": "2021-11-22T12:15:29.534359Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.534829Z", "completed_at": "2021-11-22T12:15:29.534832Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_base_events_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_base_events_this_run_event_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_base_events_this_run_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_base_events_this_run_event_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "name": "unique_snowplow_web_base_events_this_run_event_id", "resource_type": "test", "alias": "unique_snowplow_web_base_events_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_base_events_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/base/scratch/base_scratch.yml/schema_test/unique_snowplow_web_base_events_this_run_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.008575201034545898, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.527567Z", "completed_at": "2021-11-22T12:15:29.534594Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.535337Z", "completed_at": "2021-11-22T12:15:29.535340Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_pv_engaged_time') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_pv_engaged_time_page_view_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_pv_engaged_time_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_pv_engaged_time_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_pv_engaged_time_page_view_id", "resource_type": "test", "alias": "not_null_snowplow_web_pv_engaged_time_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_pv_engaged_time"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_pv_engaged_time"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_pv_engaged_time_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time\nwhere page_view_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time\nwhere page_view_id is null\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.06717586517333984, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.535876Z", "completed_at": "2021-11-22T12:15:29.559958Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.601930Z", "completed_at": "2021-11-22T12:15:29.601937Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_pv_scroll_depth') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_pv_scroll_depth_page_view_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_pv_scroll_depth_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_pv_scroll_depth_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_pv_scroll_depth_page_view_id", "resource_type": "test", "alias": "not_null_snowplow_web_pv_scroll_depth_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_pv_scroll_depth"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_pv_scroll_depth"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_pv_scroll_depth_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth\nwhere page_view_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth\nwhere page_view_id is null\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.0066928863525390625, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.602652Z", "completed_at": "2021-11-22T12:15:29.608445Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.608692Z", "completed_at": "2021-11-22T12:15:29.608696Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_pv_engaged_time') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_pv_engaged_time_page_view_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_pv_engaged_time_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_pv_engaged_time_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "unique_snowplow_web_pv_engaged_time_page_view_id", "resource_type": "test", "alias": "unique_snowplow_web_pv_engaged_time_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_pv_engaged_time"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_pv_engaged_time"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/unique_snowplow_web_pv_engaged_time_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.06768798828125, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.541967Z", "completed_at": "2021-11-22T12:15:29.608546Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.608982Z", "completed_at": "2021-11-22T12:15:29.608985Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_pv_scroll_depth') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_pv_scroll_depth_page_view_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_pv_scroll_depth_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_pv_scroll_depth_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "unique_snowplow_web_pv_scroll_depth_page_view_id", "resource_type": "test", "alias": "unique_snowplow_web_pv_scroll_depth_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_pv_scroll_depth"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_pv_scroll_depth"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/unique_snowplow_web_pv_scroll_depth_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.005755901336669922, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.609907Z", "completed_at": "2021-11-22T12:15:29.615229Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.615357Z", "completed_at": "2021-11-22T12:15:29.615361Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=[\"domain_sessionid\"],\n    tags=[\"this_run\"]\n  ) \n}}\n\nwith page_view_events as (\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.derived_tstamp as start_tstamp,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone ,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n  ev.os_timezone,\n\n  row_number() over (partition by ev.domain_sessionid order by ev.derived_tstamp) AS page_view_in_session_index,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields: set iab variable to true to enable\n  {{ snowplow_utils.get_optional_fields(\n        enabled=var('snowplow__enable_iab'),\n        fields=iab_fields(),\n        col_prefix='contexts_com_iab_snowplow_spiders_and_robots_1',\n        relation=ref('snowplow_web_base_events_this_run'),\n        relation_alias='ev') }},\n\n  -- ua parser enrichment fields: set ua_parser variable to true to enable\n  {{ snowplow_utils.get_optional_fields(\n        enabled=var('snowplow__enable_ua'),\n        fields=ua_fields(),\n        col_prefix='contexts_com_snowplowanalytics_snowplow_ua_parser_context_1',\n        relation=ref('snowplow_web_base_events_this_run'),\n        relation_alias='ev') }},\n\n  -- yauaa enrichment fields: set yauaa variable to true to enable\n  {{ snowplow_utils.get_optional_fields(\n        enabled=var('snowplow__enable_yauaa'),\n        fields=yauaa_fields(),\n        col_prefix='contexts_nl_basjes_yauaa_context_1',\n        relation=ref('snowplow_web_base_events_this_run'),\n        relation_alias='ev') }}\n\nfrom (\n  select\n    array_agg(e order by e.derived_tstamp limit 1)[offset(0)] as ev\n    -- order by matters here since derived_tstamp determines parts of model logic\n\n  from {{ ref('snowplow_web_base_events_this_run') }} as e\n  where e.event_name = 'page_view'\n  and e.page_view_id is not null\n  \n  group by e.page_view_id\n)\n\n{% if var(\"snowplow__ua_bot_filter\", true) %}\n   where not regexp_contains(ev.useragent, '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)%')\n{% endif %}\n)\n\n\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  ev.page_view_in_session_index,\n  max(ev.page_view_in_session_index) over (partition by ev.domain_sessionid) as page_views_in_session,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.start_tstamp,\n  coalesce(t.end_tstamp, ev.derived_tstamp) as end_tstamp, -- only page views with pings will have a row in table t\n  {{ dbt_utils.current_timestamp_in_utc() }} as model_tstamp,\n\n  coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s, -- where there are no pings, engaged time is 0.\n  timestamp_diff(coalesce(t.end_tstamp, ev.derived_tstamp), ev.derived_tstamp, second)  as absolute_time_in_s,\n\n  sd.hmax as horizontal_pixels_scrolled,\n  sd.vmax as vertical_pixels_scrolled,\n\n  sd.relative_hmax as horizontal_percentage_scrolled,\n  sd.relative_vmax as vertical_percentage_scrolled,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n\n  ev.os_timezone,\n\n  ev.category,\n  ev.primary_impact,\n  ev.reason,\n  ev.spider_or_robot,\n  \n  ev.useragent_family,\n  ev.useragent_major,\n  ev.useragent_minor,\n  ev.useragent_patch,\n  ev.useragent_version,\n  ev.os_family,\n  ev.os_major,\n  ev.os_minor,\n  ev.os_patch,\n  ev.os_patch_minor,\n  ev.os_version,\n  ev.device_family,\n\n  ev.device_class,\n  ev.agent_class,\n  ev.agent_name,\n  ev.agent_name_version,\n  ev.agent_name_version_major,\n  ev.agent_version,\n  ev.agent_version_major,\n  ev.device_brand,\n  ev.device_name,\n  ev.device_version,\n  ev.layout_engine_class,\n  ev.layout_engine_name,\n  ev.layout_engine_name_version,\n  ev.layout_engine_name_version_major,\n  ev.layout_engine_version,\n  ev.layout_engine_version_major,\n  ev.operating_system_class,\n  ev.operating_system_name,\n  ev.operating_system_name_version,\n  ev.operating_system_version\n\nfrom page_view_events ev\n\nleft join {{ ref('snowplow_web_pv_engaged_time') }} t\non ev.page_view_id = t.page_view_id\n\nleft join {{ ref('snowplow_web_pv_scroll_depth') }} sd\non ev.page_view_id = sd.page_view_id", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "page_views", "scratch", "bigquery", "snowplow_web_page_views_this_run"], "unique_id": "model.snowplow_web.snowplow_web_page_views_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "page_views/scratch/bigquery/snowplow_web_page_views_this_run.sql", "original_file_path": "models/page_views/scratch/bigquery/snowplow_web_page_views_this_run.sql", "name": "snowplow_web_page_views_this_run", "resource_type": "model", "alias": "snowplow_web_page_views_this_run", "checksum": {"name": "sha256", "checksum": "678c6ff6eb8a79c184502715cad53470fd6a9bb9e4ee86740c64a182941c3b3a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "full_refresh": null, "cluster_by": ["domain_sessionid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}}, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "refs": [["snowplow_web_base_events_this_run"], ["snowplow_web_base_events_this_run"], ["snowplow_web_base_events_this_run"], ["snowplow_web_base_events_this_run"], ["snowplow_web_pv_engaged_time"], ["snowplow_web_pv_scroll_depth"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.iab_fields", "macro.snowplow_utils.get_optional_fields", "macro.snowplow_web.ua_fields", "macro.snowplow_web.yauaa_fields", "macro.dbt_utils.current_timestamp_in_utc"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run", "model.snowplow_web.snowplow_web_base_events_this_run", "model.snowplow_web.snowplow_web_base_events_this_run", "model.snowplow_web.snowplow_web_base_events_this_run", "model.snowplow_web.snowplow_web_pv_engaged_time", "model.snowplow_web.snowplow_web_pv_scroll_depth"]}, "description": "This staging table contains all the page views for the given run of the Web model. It possess all the same columns as `snowplow_web_page_views`. If building a custom module that requires page view events, this is the table you should reference.", "columns": {"page_view_id": {"name": "page_view_id", "description": "A UUID for each page view e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "event_id": {"name": "event_id", "description": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": []}, "app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "tags": []}, "page_view_in_session_index": {"name": "page_view_in_session_index", "description": "A page view index within a single session", "meta": {}, "data_type": null, "tags": []}, "page_views_in_session": {"name": "page_views_in_session", "description": "Distinct count of `page_view_id` within a session", "meta": {}, "data_type": null, "tags": []}, "dvce_created_tstamp": {"name": "dvce_created_tstamp", "description": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019", "meta": {}, "data_type": null, "tags": []}, "collector_tstamp": {"name": "collector_tstamp", "description": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "tags": []}, "derived_tstamp": {"name": "derived_tstamp", "description": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the page view, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the end of the page view, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "Time spent by the user on the page calculated using page pings.", "meta": {}, "data_type": null, "tags": []}, "absolute_time_in_s": {"name": "absolute_time_in_s", "description": "The time in seconds between the `start_tstamp` and `end_tstamp`", "meta": {}, "data_type": null, "tags": []}, "horizontal_pixels_scrolled": {"name": "horizontal_pixels_scrolled", "description": "Distance the user scrolled horizontally in pixels", "meta": {}, "data_type": null, "tags": []}, "vertical_pixels_scrolled": {"name": "vertical_pixels_scrolled", "description": "Distance the user scrolled vertically in pixels", "meta": {}, "data_type": null, "tags": []}, "horizontal_percentage_scrolled": {"name": "horizontal_percentage_scrolled", "description": "Percentage of page scrolled horizontally", "meta": {}, "data_type": null, "tags": []}, "vertical_percentage_scrolled": {"name": "vertical_percentage_scrolled", "description": "Percentage of page scrolled vertically", "meta": {}, "data_type": null, "tags": []}, "doc_width": {"name": "doc_width", "description": "The page\u2019s width in pixels e.g. 1024", "meta": {}, "data_type": null, "tags": []}, "doc_height": {"name": "doc_height", "description": "The page\u2019s height in pixels e.g. 3000", "meta": {}, "data_type": null, "tags": []}, "page_title": {"name": "page_title", "description": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019", "meta": {}, "data_type": null, "tags": []}, "page_url": {"name": "page_url", "description": "The page URL e.g. \u2018http://www.example.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlscheme": {"name": "page_urlscheme", "description": "Scheme aka protocol e.g. \u2018https\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlhost": {"name": "page_urlhost", "description": "Host aka domain e.g. \u2018\u201cwww.snowplowanalytics.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlpath": {"name": "page_urlpath", "description": "Path to page e.g. \u2018/product/index.html\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlquery": {"name": "page_urlquery", "description": "Querystring e.g. \u2018id=GTM-DLRG\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlfragment": {"name": "page_urlfragment", "description": "Fragment aka anchor e.g. \u20184-conclusion\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}, "page_referrer": {"name": "page_referrer", "description": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "tags": []}, "br_viewwidth": {"name": "br_viewwidth", "description": "Viewport width e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "br_viewheight": {"name": "br_viewheight", "description": "Viewport height e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "br_colordepth": {"name": "br_colordepth", "description": "Bit depth of the browser color palette e.g. 24", "meta": {}, "data_type": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "category": {"name": "category", "description": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise", "meta": {}, "data_type": null, "tags": []}, "primary_impact": {"name": "primary_impact", "description": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise", "meta": {}, "data_type": null, "tags": []}, "spider_or_robot": {"name": "spider_or_robot", "description": "True if the IP address or user agent checked against the list is a spider or robot, false otherwise", "meta": {}, "data_type": null, "tags": []}, "useragent_family": {"name": "useragent_family", "description": "Useragent family (browser) name", "meta": {}, "data_type": null, "tags": []}, "useragent_major": {"name": "useragent_major", "description": "Useragent major version", "meta": {}, "data_type": null, "tags": []}, "useragent_minor": {"name": "useragent_minor", "description": "Useragent minor version", "meta": {}, "data_type": null, "tags": []}, "useragent_patch": {"name": "useragent_patch", "description": "Useragent patch version", "meta": {}, "data_type": null, "tags": []}, "useragent_version": {"name": "useragent_version", "description": "Full version of the useragent", "meta": {}, "data_type": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "tags": []}, "os_major": {"name": "os_major", "description": "Operation system major version", "meta": {}, "data_type": null, "tags": []}, "os_minor": {"name": "os_minor", "description": "Operation system minor version", "meta": {}, "data_type": null, "tags": []}, "os_patch": {"name": "os_patch", "description": "Operation system patch version", "meta": {}, "data_type": null, "tags": []}, "os_patch_minor": {"name": "os_patch_minor", "description": "Operation system patch minor version", "meta": {}, "data_type": null, "tags": []}, "os_version": {"name": "os_version", "description": "Operation system full version", "meta": {}, "data_type": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device type", "meta": {}, "data_type": null, "tags": []}, "device_class": {"name": "device_class", "description": "Class of device e.g. phone", "meta": {}, "data_type": null, "tags": []}, "agent_class": {"name": "agent_class", "description": "Class of agent e.g. browser", "meta": {}, "data_type": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of agent e.g. Chrome", "meta": {}, "data_type": null, "tags": []}, "agent_name_version": {"name": "agent_name_version", "description": "Name and version of agent e.g. Chrome 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_name_version_major": {"name": "agent_name_version_major", "description": "Name and major version of agent e.g. Chrome 53", "meta": {}, "data_type": null, "tags": []}, "agent_version": {"name": "agent_version", "description": "Version of agent e.g. 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_version_major": {"name": "agent_version_major", "description": "Major version of agent e.g. 53", "meta": {}, "data_type": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device e.g. Google", "meta": {}, "data_type": null, "tags": []}, "device_name": {"name": "device_name", "description": "Name of device e.g. Google Nexus 6", "meta": {}, "data_type": null, "tags": []}, "device_version": {"name": "device_version", "description": "Version of device e.g. 6.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_class": {"name": "layout_engine_class", "description": "Class of layout engine e.g. Browser", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name": {"name": "layout_engine_name", "description": "Name of layout engine e.g. Blink", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version": {"name": "layout_engine_name_version", "description": "Name and version of layout engine e.g. Blink 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version_major": {"name": "layout_engine_name_version_major", "description": "Name and major version of layout engine e.g. Blink 53", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version": {"name": "layout_engine_version", "description": "Version of layout engine e.g. 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version_major": {"name": "layout_engine_version_major", "description": "Major version of layout engine e.g. 53", "meta": {}, "data_type": null, "tags": []}, "operating_system_class": {"name": "operating_system_class", "description": "Class of the OS e.g. Mobile", "meta": {}, "data_type": null, "tags": []}, "operating_system_name": {"name": "operating_system_name", "description": "Name of the OS e.g. Android", "meta": {}, "data_type": null, "tags": []}, "operating_system_name_version": {"name": "operating_system_name_version", "description": "Name and version of the OS e.g. Android 7.0", "meta": {}, "data_type": null, "tags": []}, "operating_system_version": {"name": "operating_system_version", "description": "Version of the OS e.g. 7.0", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/page_views/scratch/page_views_scratch.yml", "build_path": "target/compiled/snowplow_web/models/page_views/scratch/bigquery/snowplow_web_page_views_this_run.sql", "deferred": false, "compiled_sql": "\n\nwith page_view_events as (\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.derived_tstamp as start_tstamp,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone ,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n  ev.os_timezone,\n\n  row_number() over (partition by ev.domain_sessionid order by ev.derived_tstamp) AS page_view_in_session_index,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields: set iab variable to true to enable\n  cast(null as string) as category, \n    cast(null as string) as primary_impact, \n    cast(null as string) as reason, \n    cast(null as boolean) as spider_or_robot\n    ,\n\n  -- ua parser enrichment fields: set ua_parser variable to true to enable\n  cast(null as string) as useragent_family, \n    cast(null as string) as useragent_major, \n    cast(null as string) as useragent_minor, \n    cast(null as string) as useragent_patch, \n    cast(null as string) as useragent_version, \n    cast(null as string) as os_family, \n    cast(null as string) as os_major, \n    cast(null as string) as os_minor, \n    cast(null as string) as os_patch, \n    cast(null as string) as os_patch_minor, \n    cast(null as string) as os_version, \n    cast(null as string) as device_family\n    ,\n\n  -- yauaa enrichment fields: set yauaa variable to true to enable\n  cast(null as string) as device_class, \n    cast(null as string) as agent_class, \n    cast(null as string) as agent_name, \n    cast(null as string) as agent_name_version, \n    cast(null as string) as agent_name_version_major, \n    cast(null as string) as agent_version, \n    cast(null as string) as agent_version_major, \n    cast(null as string) as device_brand, \n    cast(null as string) as device_name, \n    cast(null as string) as device_version, \n    cast(null as string) as layout_engine_class, \n    cast(null as string) as layout_engine_name, \n    cast(null as string) as layout_engine_name_version, \n    cast(null as string) as layout_engine_name_version_major, \n    cast(null as string) as layout_engine_version, \n    cast(null as string) as layout_engine_version_major, \n    cast(null as string) as operating_system_class, \n    cast(null as string) as operating_system_name, \n    cast(null as string) as operating_system_name_version, \n    cast(null as string) as operating_system_version\n    \n\nfrom (\n  select\n    array_agg(e order by e.derived_tstamp limit 1)[offset(0)] as ev\n    -- order by matters here since derived_tstamp determines parts of model logic\n\n  from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as e\n  where e.event_name = 'page_view'\n  and e.page_view_id is not null\n  \n  group by e.page_view_id\n)\n\n\n   where not regexp_contains(ev.useragent, '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)%')\n\n)\n\n\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  ev.page_view_in_session_index,\n  max(ev.page_view_in_session_index) over (partition by ev.domain_sessionid) as page_views_in_session,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.start_tstamp,\n  coalesce(t.end_tstamp, ev.derived_tstamp) as end_tstamp, -- only page views with pings will have a row in table t\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s, -- where there are no pings, engaged time is 0.\n  timestamp_diff(coalesce(t.end_tstamp, ev.derived_tstamp), ev.derived_tstamp, second)  as absolute_time_in_s,\n\n  sd.hmax as horizontal_pixels_scrolled,\n  sd.vmax as vertical_pixels_scrolled,\n\n  sd.relative_hmax as horizontal_percentage_scrolled,\n  sd.relative_vmax as vertical_percentage_scrolled,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n\n  ev.os_timezone,\n\n  ev.category,\n  ev.primary_impact,\n  ev.reason,\n  ev.spider_or_robot,\n  \n  ev.useragent_family,\n  ev.useragent_major,\n  ev.useragent_minor,\n  ev.useragent_patch,\n  ev.useragent_version,\n  ev.os_family,\n  ev.os_major,\n  ev.os_minor,\n  ev.os_patch,\n  ev.os_patch_minor,\n  ev.os_version,\n  ev.device_family,\n\n  ev.device_class,\n  ev.agent_class,\n  ev.agent_name,\n  ev.agent_name_version,\n  ev.agent_name_version_major,\n  ev.agent_version,\n  ev.agent_version_major,\n  ev.device_brand,\n  ev.device_name,\n  ev.device_version,\n  ev.layout_engine_class,\n  ev.layout_engine_name,\n  ev.layout_engine_name_version,\n  ev.layout_engine_name_version_major,\n  ev.layout_engine_version,\n  ev.layout_engine_version_major,\n  ev.operating_system_class,\n  ev.operating_system_name,\n  ev.operating_system_name_version,\n  ev.operating_system_version\n\nfrom page_view_events ev\n\nleft join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time t\non ev.page_view_id = t.page_view_id\n\nleft join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth sd\non ev.page_view_id = sd.page_view_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith page_view_events as (\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.derived_tstamp as start_tstamp,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone ,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n  ev.os_timezone,\n\n  row_number() over (partition by ev.domain_sessionid order by ev.derived_tstamp) AS page_view_in_session_index,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields: set iab variable to true to enable\n  cast(null as string) as category, \n    cast(null as string) as primary_impact, \n    cast(null as string) as reason, \n    cast(null as boolean) as spider_or_robot\n    ,\n\n  -- ua parser enrichment fields: set ua_parser variable to true to enable\n  cast(null as string) as useragent_family, \n    cast(null as string) as useragent_major, \n    cast(null as string) as useragent_minor, \n    cast(null as string) as useragent_patch, \n    cast(null as string) as useragent_version, \n    cast(null as string) as os_family, \n    cast(null as string) as os_major, \n    cast(null as string) as os_minor, \n    cast(null as string) as os_patch, \n    cast(null as string) as os_patch_minor, \n    cast(null as string) as os_version, \n    cast(null as string) as device_family\n    ,\n\n  -- yauaa enrichment fields: set yauaa variable to true to enable\n  cast(null as string) as device_class, \n    cast(null as string) as agent_class, \n    cast(null as string) as agent_name, \n    cast(null as string) as agent_name_version, \n    cast(null as string) as agent_name_version_major, \n    cast(null as string) as agent_version, \n    cast(null as string) as agent_version_major, \n    cast(null as string) as device_brand, \n    cast(null as string) as device_name, \n    cast(null as string) as device_version, \n    cast(null as string) as layout_engine_class, \n    cast(null as string) as layout_engine_name, \n    cast(null as string) as layout_engine_name_version, \n    cast(null as string) as layout_engine_name_version_major, \n    cast(null as string) as layout_engine_version, \n    cast(null as string) as layout_engine_version_major, \n    cast(null as string) as operating_system_class, \n    cast(null as string) as operating_system_name, \n    cast(null as string) as operating_system_name_version, \n    cast(null as string) as operating_system_version\n    \n\nfrom (\n  select\n    array_agg(e order by e.derived_tstamp limit 1)[offset(0)] as ev\n    -- order by matters here since derived_tstamp determines parts of model logic\n\n  from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run as e\n  where e.event_name = 'page_view'\n  and e.page_view_id is not null\n  \n  group by e.page_view_id\n)\n\n\n   where not regexp_contains(ev.useragent, '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)%')\n\n)\n\n\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  ev.page_view_in_session_index,\n  max(ev.page_view_in_session_index) over (partition by ev.domain_sessionid) as page_views_in_session,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.start_tstamp,\n  coalesce(t.end_tstamp, ev.derived_tstamp) as end_tstamp, -- only page views with pings will have a row in table t\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s, -- where there are no pings, engaged time is 0.\n  timestamp_diff(coalesce(t.end_tstamp, ev.derived_tstamp), ev.derived_tstamp, second)  as absolute_time_in_s,\n\n  sd.hmax as horizontal_pixels_scrolled,\n  sd.vmax as vertical_pixels_scrolled,\n\n  sd.relative_hmax as horizontal_percentage_scrolled,\n  sd.relative_vmax as vertical_percentage_scrolled,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n\n  ev.os_timezone,\n\n  ev.category,\n  ev.primary_impact,\n  ev.reason,\n  ev.spider_or_robot,\n  \n  ev.useragent_family,\n  ev.useragent_major,\n  ev.useragent_minor,\n  ev.useragent_patch,\n  ev.useragent_version,\n  ev.os_family,\n  ev.os_major,\n  ev.os_minor,\n  ev.os_patch,\n  ev.os_patch_minor,\n  ev.os_version,\n  ev.device_family,\n\n  ev.device_class,\n  ev.agent_class,\n  ev.agent_name,\n  ev.agent_name_version,\n  ev.agent_name_version_major,\n  ev.agent_version,\n  ev.agent_version_major,\n  ev.device_brand,\n  ev.device_name,\n  ev.device_version,\n  ev.layout_engine_class,\n  ev.layout_engine_name,\n  ev.layout_engine_name_version,\n  ev.layout_engine_name_version_major,\n  ev.layout_engine_version,\n  ev.layout_engine_version_major,\n  ev.operating_system_class,\n  ev.operating_system_name,\n  ev.operating_system_name_version,\n  ev.operating_system_version\n\nfrom page_view_events ev\n\nleft join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_engaged_time t\non ev.page_view_id = t.page_view_id\n\nleft join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_pv_scroll_depth sd\non ev.page_view_id = sd.page_view_id"}, "error": null, "status": null, "execution_time": 0.09602117538452148, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.542028Z", "completed_at": "2021-11-22T12:15:29.637562Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.637696Z", "completed_at": "2021-11-22T12:15:29.637701Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_sessionid\"]),\n    sort='domain_sessionid',\n    dist='domain_sessionid'\n  ) \n}}\n\nselect\n  domain_sessionid,\n  -- time\n  min(start_tstamp) as start_tstamp,\n  max(end_tstamp) as end_tstamp,\n\n  -- engagement\n  count(distinct page_view_id) as page_views,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom {{ ref('snowplow_web_page_views_this_run') }}\n\nwhere domain_sessionid is not null\ngroup by 1", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "sessions", "scratch", "snowplow_web_sessions_aggs"], "unique_id": "model.snowplow_web.snowplow_web_sessions_aggs", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "sessions/scratch/snowplow_web_sessions_aggs.sql", "original_file_path": "models/sessions/scratch/snowplow_web_sessions_aggs.sql", "name": "snowplow_web_sessions_aggs", "resource_type": "model", "alias": "snowplow_web_sessions_aggs", "checksum": {"name": "sha256", "checksum": "d5a3b1e0386677975fa6adb6e6fee913507798cc85cd105e0a0639194f70855f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["domain_sessionid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "domain_sessionid", "dist": "domain_sessionid"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "This model aggregates various metrics derived from page views to a session level.", "columns": {"domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/sessions/scratch/sessions_scratch.yml", "build_path": "target/compiled/snowplow_web/models/sessions/scratch/snowplow_web_sessions_aggs.sql", "deferred": false, "compiled_sql": "\n\nselect\n  domain_sessionid,\n  -- time\n  min(start_tstamp) as start_tstamp,\n  max(end_tstamp) as end_tstamp,\n\n  -- engagement\n  count(distinct page_view_id) as page_views,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n\nwhere domain_sessionid is not null\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  domain_sessionid,\n  -- time\n  min(start_tstamp) as start_tstamp,\n  max(end_tstamp) as end_tstamp,\n\n  -- engagement\n  count(distinct page_view_id) as page_views,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n\nwhere domain_sessionid is not null\ngroup by 1"}, "error": null, "status": null, "execution_time": 0.034047842025756836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.638501Z", "completed_at": "2021-11-22T12:15:29.644176Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.644385Z", "completed_at": "2021-11-22T12:15:29.644389Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "absolute_time_in_s", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_absolute_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_absolute_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_absolute_time_in_s.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_absolute_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_absolute_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_absolute_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere absolute_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere absolute_time_in_s is null\n\n\n", "column_name": "absolute_time_in_s"}, "error": null, "status": null, "execution_time": 0.034356117248535156, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.644332Z", "completed_at": "2021-11-22T12:15:29.678095Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.678226Z", "completed_at": "2021-11-22T12:15:29.678230Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "collector_tstamp", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_collector_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_collector_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_collector_tstamp.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_collector_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_collector_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_collector_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere collector_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere collector_tstamp is null\n\n\n", "column_name": "collector_tstamp"}, "error": null, "status": null, "execution_time": 0.012085199356079102, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.672887Z", "completed_at": "2021-11-22T12:15:29.683981Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.684198Z", "completed_at": "2021-11-22T12:15:29.684201Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "derived_tstamp", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_derived_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_derived_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_derived_tstamp.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_derived_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_derived_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_derived_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere derived_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere derived_tstamp is null\n\n\n", "column_name": "derived_tstamp"}, "error": null, "status": null, "execution_time": 0.006730079650878906, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.678645Z", "completed_at": "2021-11-22T12:15:29.684367Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.684942Z", "completed_at": "2021-11-22T12:15:29.684945Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_domain_sessionid.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.011562108993530273, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.685575Z", "completed_at": "2021-11-22T12:15:29.696184Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.696424Z", "completed_at": "2021-11-22T12:15:29.696428Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionidx", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_domain_sessionidx"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_domain_sessionidx", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_domain_sessionidx.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_domain_sessionidx", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_domain_sessionidx", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_domain_sessionidx.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionidx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionidx is null\n\n\n", "column_name": "domain_sessionidx"}, "error": null, "status": null, "execution_time": 0.011564016342163086, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.690688Z", "completed_at": "2021-11-22T12:15:29.696307Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.696558Z", "completed_at": "2021-11-22T12:15:29.696560Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_domain_userid.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.010706901550292969, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.697857Z", "completed_at": "2021-11-22T12:15:29.708004Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.708130Z", "completed_at": "2021-11-22T12:15:29.708135Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "dvce_created_tstamp", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_dvce_created_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_dvce_created_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_dvce_created_tstamp.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_dvce_created_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_dvce_created_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_dvce_created_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere dvce_created_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere dvce_created_tstamp is null\n\n\n", "column_name": "dvce_created_tstamp"}, "error": null, "status": null, "execution_time": 0.01656508445739746, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.697908Z", "completed_at": "2021-11-22T12:15:29.713700Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.713936Z", "completed_at": "2021-11-22T12:15:29.713939Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_end_tstamp.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.006002187728881836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.708548Z", "completed_at": "2021-11-22T12:15:29.713822Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.714080Z", "completed_at": "2021-11-22T12:15:29.714083Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_engaged_time_in_s.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.01165008544921875, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.715258Z", "completed_at": "2021-11-22T12:15:29.726107Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.726258Z", "completed_at": "2021-11-22T12:15:29.726263Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_event_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_event_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_event_id", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.012536764144897461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.715342Z", "completed_at": "2021-11-22T12:15:29.726394Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.727235Z", "completed_at": "2021-11-22T12:15:29.727239Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_network_userid.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.010828733444213867, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.727963Z", "completed_at": "2021-11-22T12:15:29.738215Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.738351Z", "completed_at": "2021-11-22T12:15:29.738355Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_url", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_page_url.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_url is null\n\n\n", "column_name": "page_url"}, "error": null, "status": null, "execution_time": 0.011122941970825195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.733198Z", "completed_at": "2021-11-22T12:15:29.738612Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.738841Z", "completed_at": "2021-11-22T12:15:29.738844Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_page_view_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_page_view_id", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_view_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_view_id is null\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.010949134826660156, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.739200Z", "completed_at": "2021-11-22T12:15:29.749598Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.749725Z", "completed_at": "2021-11-22T12:15:29.749729Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views_in_session", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_page_views_in_session"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_views_in_session", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_page_views_in_session.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_page_views_in_session", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_page_views_in_session", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_page_views_in_session.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_views_in_session is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_views_in_session is null\n\n\n", "column_name": "page_views_in_session"}, "error": null, "status": null, "execution_time": 0.005857229232788086, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.750141Z", "completed_at": "2021-11-22T12:15:29.755286Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.755539Z", "completed_at": "2021-11-22T12:15:29.755543Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_in_session_index", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_page_view_in_session_index"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_view_in_session_index", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_page_view_in_session_index.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_page_view_in_session_index", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_page_view_in_session_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_page_view_in_session_index.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_view_in_session_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere page_view_in_session_index is null\n\n\n", "column_name": "page_view_in_session_index"}, "error": null, "status": null, "execution_time": 0.01263117790222168, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.744513Z", "completed_at": "2021-11-22T12:15:29.755406Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.755689Z", "completed_at": "2021-11-22T12:15:29.755691Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_this_run_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_this_run_start_tstamp.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "not_null_snowplow_web_page_views_this_run_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_this_run_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/not_null_snowplow_web_page_views_this_run_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.011834859848022461, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.757586Z", "completed_at": "2021-11-22T12:15:29.768608Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.768830Z", "completed_at": "2021-11-22T12:15:29.768835Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_page_views_this_run_event_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_this_run_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_page_views_this_run_event_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "unique_snowplow_web_page_views_this_run_event_id", "resource_type": "test", "alias": "unique_snowplow_web_page_views_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/unique_snowplow_web_page_views_this_run_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.011861085891723633, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.757637Z", "completed_at": "2021-11-22T12:15:29.768729Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.768985Z", "completed_at": "2021-11-22T12:15:29.768987Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_page_views_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_page_views_this_run_page_view_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_this_run_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_page_views_this_run_page_view_id.sql", "original_file_path": "models/page_views/scratch/page_views_scratch.yml", "name": "unique_snowplow_web_page_views_this_run_page_view_id", "resource_type": "test", "alias": "unique_snowplow_web_page_views_this_run_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_page_views_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/scratch/page_views_scratch.yml/schema_test/unique_snowplow_web_page_views_this_run_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.011409997940063477, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.769883Z", "completed_at": "2021-11-22T12:15:29.780547Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.780754Z", "completed_at": "2021-11-22T12:15:29.780758Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_sessionid\"]),\n    sort='domain_sessionid',\n    dist='domain_sessionid'\n  ) \n}}\n\nselect\n  a.domain_sessionid,\n  a.page_title as last_page_title,\n\n  a.page_url as last_page_url,\n\n  a.page_urlscheme as last_page_urlscheme,\n  a.page_urlhost as last_page_urlhost,\n  a.page_urlpath as last_page_urlpath,\n  a.page_urlquery as last_page_urlquery,\n  a.page_urlfragment as last_page_urlfragment\n\nfrom {{ ref('snowplow_web_page_views_this_run') }} a\n\ninner join {{ ref('snowplow_web_sessions_aggs') }} b\non a.domain_sessionid = b.domain_sessionid\n-- don't join on timestamp because people can return to a page after previous page view is complete.\nand a.page_view_in_session_index = b.page_views", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "sessions", "scratch", "snowplow_web_sessions_lasts"], "unique_id": "model.snowplow_web.snowplow_web_sessions_lasts", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "sessions/scratch/snowplow_web_sessions_lasts.sql", "original_file_path": "models/sessions/scratch/snowplow_web_sessions_lasts.sql", "name": "snowplow_web_sessions_lasts", "resource_type": "model", "alias": "snowplow_web_sessions_lasts", "checksum": {"name": "sha256", "checksum": "5a43719ca8956b5c1ae74148bbc7b7ff0b90c20feef1329fa2e475fe4ccf8eb5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["domain_sessionid"], "sort": "domain_sessionid", "dist": "domain_sessionid"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_page_views_this_run"], ["snowplow_web_sessions_aggs"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run", "model.snowplow_web.snowplow_web_sessions_aggs"]}, "description": "This model identifies the last page view within a given session and returns various dimensions associated with that page view.", "columns": {"domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/sessions/scratch/sessions_scratch.yml", "build_path": "target/compiled/snowplow_web/models/sessions/scratch/snowplow_web_sessions_lasts.sql", "deferred": false, "compiled_sql": "\n\nselect\n  a.domain_sessionid,\n  a.page_title as last_page_title,\n\n  a.page_url as last_page_url,\n\n  a.page_urlscheme as last_page_urlscheme,\n  a.page_urlhost as last_page_urlhost,\n  a.page_urlpath as last_page_urlpath,\n  a.page_urlquery as last_page_urlquery,\n  a.page_urlfragment as last_page_urlfragment\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run a\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs b\non a.domain_sessionid = b.domain_sessionid\n-- don't join on timestamp because people can return to a page after previous page view is complete.\nand a.page_view_in_session_index = b.page_views", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  a.domain_sessionid,\n  a.page_title as last_page_title,\n\n  a.page_url as last_page_url,\n\n  a.page_urlscheme as last_page_urlscheme,\n  a.page_urlhost as last_page_urlhost,\n  a.page_urlpath as last_page_urlpath,\n  a.page_urlquery as last_page_urlquery,\n  a.page_urlfragment as last_page_urlfragment\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run a\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs b\non a.domain_sessionid = b.domain_sessionid\n-- don't join on timestamp because people can return to a page after previous page view is complete.\nand a.page_view_in_session_index = b.page_views"}, "error": null, "status": null, "execution_time": 0.011429071426391602, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.769933Z", "completed_at": "2021-11-22T12:15:29.780662Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.780874Z", "completed_at": "2021-11-22T12:15:29.780877Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_aggs') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_sessions_aggs_domain_sessionid"], "unique_id": "test.snowplow_web.unique_snowplow_web_sessions_aggs_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_sessions_aggs_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "unique_snowplow_web_sessions_aggs_domain_sessionid", "resource_type": "test", "alias": "unique_snowplow_web_sessions_aggs_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_aggs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_sessions_aggs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/unique_snowplow_web_sessions_aggs_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.01023101806640625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.781865Z", "completed_at": "2021-11-22T12:15:29.791658Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.791774Z", "completed_at": "2021-11-22T12:15:29.791777Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_aggs') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_aggs_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_aggs_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_aggs_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_aggs_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_aggs_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_aggs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_aggs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_aggs_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.03819417953491211, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.781815Z", "completed_at": "2021-11-22T12:15:29.810563Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.819523Z", "completed_at": "2021-11-22T12:15:29.819528Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_lasts') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_lasts_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_lasts_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_lasts_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_lasts_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_lasts_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_lasts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_lasts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_lasts_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.007493257522583008, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.819970Z", "completed_at": "2021-11-22T12:15:29.826901Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.827036Z", "completed_at": "2021-11-22T12:15:29.827039Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_userid\"]),\n    sort='start_tstamp',\n    dist='domain_sessionid',\n    tags=[\"this_run\"]\n  ) \n}}\n\n\nselect\n  -- app id\n  a.app_id,\n\n  -- session fields\n  a.domain_sessionid,\n  a.domain_sessionidx,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  {{ dbt_utils.current_timestamp_in_utc() }} as model_tstamp,\n\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n\n  {% if var('snowplow__session_stitching') %}\n    -- updated with mapping as part of post hook on derived sessions table\n    a.domain_userid as stitched_user_id, \n  {% else %}\n    cast(null as {{ dbt_utils.type_string() }}) as stitched_user_id,\n  {% endif %}\n  \n  a.network_userid,\n\n  -- engagement fields\n  b.page_views,\n  b.engaged_time_in_s,\n  {{ snowplow_utils.timestamp_diff('b.start_tstamp', 'b.end_tstamp', 'second') }} as absolute_time_in_s,\n\n  -- first page fields\n  a.page_title as first_page_title,\n\n  a.page_url as first_page_url,\n\n  a.page_urlscheme as first_page_urlscheme,\n  a.page_urlhost as first_page_urlhost,\n  a.page_urlpath as first_page_urlpath,\n  a.page_urlquery as first_page_urlquery,\n  a.page_urlfragment as first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.page_referrer as referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network,\n\n  -- geo fields\n  a.geo_country,\n  a.geo_region,\n  a.geo_region_name,\n  a.geo_city,\n  a.geo_zipcode,\n  a.geo_latitude,\n  a.geo_longitude,\n  a.geo_timezone,\n\n  -- ip address\n  a.user_ipaddress,\n\n  -- user agent\n  a.useragent,\n\n  a.br_renderengine,\n  a.br_lang,\n\n  a.os_timezone,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields\n  a.category,\n  a.primary_impact,\n  a.reason,\n  a.spider_or_robot,\n\n  -- ua parser enrichment fields\n  a.useragent_family,\n  a.useragent_major,\n  a.useragent_minor,\n  a.useragent_patch,\n  a.useragent_version,\n  a.os_family,\n  a.os_major,\n  a.os_minor,\n  a.os_patch,\n  a.os_patch_minor,\n  a.os_version,\n  a.device_family,\n\n  -- yauaa enrichment fields\n  a.device_class,\n  a.agent_class,\n  a.agent_name,\n  a.agent_name_version,\n  a.agent_name_version_major,\n  a.agent_version,\n  a.agent_version_major,\n  a.device_brand,\n  a.device_name,\n  a.device_version,\n  a.layout_engine_class,\n  a.layout_engine_name,\n  a.layout_engine_name_version,\n  a.layout_engine_name_version_major,\n  a.layout_engine_version,\n  a.layout_engine_version_major,\n  a.operating_system_class,\n  a.operating_system_name,\n  a.operating_system_name_version,\n  a.operating_system_version\n\nfrom {{ ref('snowplow_web_sessions_aggs') }} as b\n\ninner join {{ ref('snowplow_web_page_views_this_run') }} as a\non a.domain_sessionid = b.domain_sessionid\nand a.start_tstamp = b.start_tstamp\nand a.page_view_in_session_index = 1\n\ninner join {{ ref('snowplow_web_sessions_lasts') }} c\non b.domain_sessionid = c.domain_sessionid", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "sessions", "scratch", "snowplow_web_sessions_this_run"], "unique_id": "model.snowplow_web.snowplow_web_sessions_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "sessions/scratch/snowplow_web_sessions_this_run.sql", "original_file_path": "models/sessions/scratch/snowplow_web_sessions_this_run.sql", "name": "snowplow_web_sessions_this_run", "resource_type": "model", "alias": "snowplow_web_sessions_this_run", "checksum": {"name": "sha256", "checksum": "30aee2769a30b597a301a2399b32e242946d25796a56590ebc6fdded6fa436f2"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "full_refresh": null, "cluster_by": ["domain_userid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "start_tstamp", "dist": "domain_sessionid"}, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "refs": [["snowplow_web_sessions_aggs"], ["snowplow_web_page_views_this_run"], ["snowplow_web_sessions_lasts"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by", "macro.dbt_utils.current_timestamp_in_utc", "macro.snowplow_utils.timestamp_diff"], "nodes": ["model.snowplow_web.snowplow_web_sessions_aggs", "model.snowplow_web.snowplow_web_page_views_this_run", "model.snowplow_web.snowplow_web_sessions_lasts"]}, "description": "This staging table contains all the sessions for the given run of the Web model. It possess all the same columns as `snowplow_web_sessions`. If building a custom module that requires session level data, this is the table you should reference.", "columns": {"app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the session, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the end of the session, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "page_views": {"name": "page_views", "description": "The number of distinct page views within a session", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "The total time engaged by a user within a session", "meta": {}, "data_type": null, "tags": []}, "absolute_time_in_s": {"name": "absolute_time_in_s", "description": "The time in seconds between the `start_tstamp` and `end_tstamp`", "meta": {}, "data_type": null, "tags": []}, "first_page_title": {"name": "first_page_title", "description": "The title of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_url": {"name": "first_page_url", "description": "The url of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlscheme": {"name": "first_page_urlscheme", "description": "The urlscheme of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlhost": {"name": "first_page_urlhost", "description": "The urlhost of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlpath": {"name": "first_page_urlpath", "description": "The urlpath of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlquery": {"name": "first_page_urlquery", "description": "The urlquery of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlfragment": {"name": "first_page_urlfragment", "description": "The urlfragment of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_title": {"name": "last_page_title", "description": "The title of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_url": {"name": "last_page_url", "description": "The url of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlscheme": {"name": "last_page_urlscheme", "description": "The urlscheme of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlhost": {"name": "last_page_urlhost", "description": "The urlhost of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlpath": {"name": "last_page_urlpath", "description": "The urlpath of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlquery": {"name": "last_page_urlquery", "description": "The urlquery of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlfragment": {"name": "last_page_urlfragment", "description": "The urlfragment of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "referrer": {"name": "referrer", "description": "The referrer associated with the first page view of the session", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "category": {"name": "category", "description": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise", "meta": {}, "data_type": null, "tags": []}, "primary_impact": {"name": "primary_impact", "description": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise", "meta": {}, "data_type": null, "tags": []}, "spider_or_robot": {"name": "spider_or_robot", "description": "True if the IP address or user agent checked against the list is a spider or robot, false otherwise", "meta": {}, "data_type": null, "tags": []}, "useragent_family": {"name": "useragent_family", "description": "Useragent family (browser) name", "meta": {}, "data_type": null, "tags": []}, "useragent_major": {"name": "useragent_major", "description": "Useragent major version", "meta": {}, "data_type": null, "tags": []}, "useragent_minor": {"name": "useragent_minor", "description": "Useragent minor version", "meta": {}, "data_type": null, "tags": []}, "useragent_patch": {"name": "useragent_patch", "description": "Useragent patch version", "meta": {}, "data_type": null, "tags": []}, "useragent_version": {"name": "useragent_version", "description": "Full version of the useragent", "meta": {}, "data_type": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "tags": []}, "os_major": {"name": "os_major", "description": "Operation system major version", "meta": {}, "data_type": null, "tags": []}, "os_minor": {"name": "os_minor", "description": "Operation system minor version", "meta": {}, "data_type": null, "tags": []}, "os_patch": {"name": "os_patch", "description": "Operation system patch version", "meta": {}, "data_type": null, "tags": []}, "os_patch_minor": {"name": "os_patch_minor", "description": "Operation system patch minor version", "meta": {}, "data_type": null, "tags": []}, "os_version": {"name": "os_version", "description": "Operation system full version", "meta": {}, "data_type": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device type", "meta": {}, "data_type": null, "tags": []}, "device_class": {"name": "device_class", "description": "Class of device e.g. phone", "meta": {}, "data_type": null, "tags": []}, "agent_class": {"name": "agent_class", "description": "Class of agent e.g. browser", "meta": {}, "data_type": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of agent e.g. Chrome", "meta": {}, "data_type": null, "tags": []}, "agent_name_version": {"name": "agent_name_version", "description": "Name and version of agent e.g. Chrome 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_name_version_major": {"name": "agent_name_version_major", "description": "Name and major version of agent e.g. Chrome 53", "meta": {}, "data_type": null, "tags": []}, "agent_version": {"name": "agent_version", "description": "Version of agent e.g. 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_version_major": {"name": "agent_version_major", "description": "Major version of agent e.g. 53", "meta": {}, "data_type": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device e.g. Google", "meta": {}, "data_type": null, "tags": []}, "device_name": {"name": "device_name", "description": "Name of device e.g. Google Nexus 6", "meta": {}, "data_type": null, "tags": []}, "device_version": {"name": "device_version", "description": "Version of device e.g. 6.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_class": {"name": "layout_engine_class", "description": "Class of layout engine e.g. Browser", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name": {"name": "layout_engine_name", "description": "Name of layout engine e.g. Blink", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version": {"name": "layout_engine_name_version", "description": "Name and version of layout engine e.g. Blink 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version_major": {"name": "layout_engine_name_version_major", "description": "Name and major version of layout engine e.g. Blink 53", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version": {"name": "layout_engine_version", "description": "Version of layout engine e.g. 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version_major": {"name": "layout_engine_version_major", "description": "Major version of layout engine e.g. 53", "meta": {}, "data_type": null, "tags": []}, "operating_system_class": {"name": "operating_system_class", "description": "Class of the OS e.g. Mobile", "meta": {}, "data_type": null, "tags": []}, "operating_system_name": {"name": "operating_system_name", "description": "Name of the OS e.g. Android", "meta": {}, "data_type": null, "tags": []}, "operating_system_name_version": {"name": "operating_system_name_version", "description": "Name and version of the OS e.g. Android 7.0", "meta": {}, "data_type": null, "tags": []}, "operating_system_version": {"name": "operating_system_version", "description": "Version of the OS e.g. 7.0", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/sessions/scratch/sessions_scratch.yml", "build_path": "target/compiled/snowplow_web/models/sessions/scratch/snowplow_web_sessions_this_run.sql", "deferred": false, "compiled_sql": "\n\n\nselect\n  -- app id\n  a.app_id,\n\n  -- session fields\n  a.domain_sessionid,\n  a.domain_sessionidx,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n\n  \n    -- updated with mapping as part of post hook on derived sessions table\n    a.domain_userid as stitched_user_id, \n  \n  \n  a.network_userid,\n\n  -- engagement fields\n  b.page_views,\n  b.engaged_time_in_s,\n  \n    timestamp_diff(b.end_tstamp, b.start_tstamp, second)\n as absolute_time_in_s,\n\n  -- first page fields\n  a.page_title as first_page_title,\n\n  a.page_url as first_page_url,\n\n  a.page_urlscheme as first_page_urlscheme,\n  a.page_urlhost as first_page_urlhost,\n  a.page_urlpath as first_page_urlpath,\n  a.page_urlquery as first_page_urlquery,\n  a.page_urlfragment as first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.page_referrer as referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network,\n\n  -- geo fields\n  a.geo_country,\n  a.geo_region,\n  a.geo_region_name,\n  a.geo_city,\n  a.geo_zipcode,\n  a.geo_latitude,\n  a.geo_longitude,\n  a.geo_timezone,\n\n  -- ip address\n  a.user_ipaddress,\n\n  -- user agent\n  a.useragent,\n\n  a.br_renderengine,\n  a.br_lang,\n\n  a.os_timezone,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields\n  a.category,\n  a.primary_impact,\n  a.reason,\n  a.spider_or_robot,\n\n  -- ua parser enrichment fields\n  a.useragent_family,\n  a.useragent_major,\n  a.useragent_minor,\n  a.useragent_patch,\n  a.useragent_version,\n  a.os_family,\n  a.os_major,\n  a.os_minor,\n  a.os_patch,\n  a.os_patch_minor,\n  a.os_version,\n  a.device_family,\n\n  -- yauaa enrichment fields\n  a.device_class,\n  a.agent_class,\n  a.agent_name,\n  a.agent_name_version,\n  a.agent_name_version_major,\n  a.agent_version,\n  a.agent_version_major,\n  a.device_brand,\n  a.device_name,\n  a.device_version,\n  a.layout_engine_class,\n  a.layout_engine_name,\n  a.layout_engine_name_version,\n  a.layout_engine_name_version_major,\n  a.layout_engine_version,\n  a.layout_engine_version_major,\n  a.operating_system_class,\n  a.operating_system_name,\n  a.operating_system_name_version,\n  a.operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs as b\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run as a\non a.domain_sessionid = b.domain_sessionid\nand a.start_tstamp = b.start_tstamp\nand a.page_view_in_session_index = 1\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts c\non b.domain_sessionid = c.domain_sessionid", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nselect\n  -- app id\n  a.app_id,\n\n  -- session fields\n  a.domain_sessionid,\n  a.domain_sessionidx,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n\n  \n    -- updated with mapping as part of post hook on derived sessions table\n    a.domain_userid as stitched_user_id, \n  \n  \n  a.network_userid,\n\n  -- engagement fields\n  b.page_views,\n  b.engaged_time_in_s,\n  \n    timestamp_diff(b.end_tstamp, b.start_tstamp, second)\n as absolute_time_in_s,\n\n  -- first page fields\n  a.page_title as first_page_title,\n\n  a.page_url as first_page_url,\n\n  a.page_urlscheme as first_page_urlscheme,\n  a.page_urlhost as first_page_urlhost,\n  a.page_urlpath as first_page_urlpath,\n  a.page_urlquery as first_page_urlquery,\n  a.page_urlfragment as first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.page_referrer as referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network,\n\n  -- geo fields\n  a.geo_country,\n  a.geo_region,\n  a.geo_region_name,\n  a.geo_city,\n  a.geo_zipcode,\n  a.geo_latitude,\n  a.geo_longitude,\n  a.geo_timezone,\n\n  -- ip address\n  a.user_ipaddress,\n\n  -- user agent\n  a.useragent,\n\n  a.br_renderengine,\n  a.br_lang,\n\n  a.os_timezone,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields\n  a.category,\n  a.primary_impact,\n  a.reason,\n  a.spider_or_robot,\n\n  -- ua parser enrichment fields\n  a.useragent_family,\n  a.useragent_major,\n  a.useragent_minor,\n  a.useragent_patch,\n  a.useragent_version,\n  a.os_family,\n  a.os_major,\n  a.os_minor,\n  a.os_patch,\n  a.os_patch_minor,\n  a.os_version,\n  a.device_family,\n\n  -- yauaa enrichment fields\n  a.device_class,\n  a.agent_class,\n  a.agent_name,\n  a.agent_name_version,\n  a.agent_name_version_major,\n  a.agent_version,\n  a.agent_version_major,\n  a.device_brand,\n  a.device_name,\n  a.device_version,\n  a.layout_engine_class,\n  a.layout_engine_name,\n  a.layout_engine_name_version,\n  a.layout_engine_name_version_major,\n  a.layout_engine_version,\n  a.layout_engine_version_major,\n  a.operating_system_class,\n  a.operating_system_name,\n  a.operating_system_name_version,\n  a.operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_aggs as b\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run as a\non a.domain_sessionid = b.domain_sessionid\nand a.start_tstamp = b.start_tstamp\nand a.page_view_in_session_index = 1\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts c\non b.domain_sessionid = c.domain_sessionid"}, "error": null, "status": null, "execution_time": 0.035676002502441406, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.792169Z", "completed_at": "2021-11-22T12:15:29.827170Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.827434Z", "completed_at": "2021-11-22T12:15:29.827436Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_lasts') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_sessions_lasts_domain_sessionid"], "unique_id": "test.snowplow_web.unique_snowplow_web_sessions_lasts_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_sessions_lasts_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "unique_snowplow_web_sessions_lasts_domain_sessionid", "resource_type": "test", "alias": "unique_snowplow_web_sessions_lasts_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_lasts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_sessions_lasts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/unique_snowplow_web_sessions_lasts_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_lasts\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.011323213577270508, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.828272Z", "completed_at": "2021-11-22T12:15:29.838909Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.839065Z", "completed_at": "2021-11-22T12:15:29.839070Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "absolute_time_in_s", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_absolute_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_absolute_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_absolute_time_in_s.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_absolute_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_absolute_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_absolute_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere absolute_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere absolute_time_in_s is null\n\n\n", "column_name": "absolute_time_in_s"}, "error": null, "status": null, "execution_time": 0.011216878890991211, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.833898Z", "completed_at": "2021-11-22T12:15:29.839548Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.839780Z", "completed_at": "2021-11-22T12:15:29.839783Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.012012958526611328, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.839723Z", "completed_at": "2021-11-22T12:15:29.845420Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.851202Z", "completed_at": "2021-11-22T12:15:29.851206Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionidx", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_domain_sessionidx"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_domain_sessionidx", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_domain_sessionidx.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_domain_sessionidx", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_domain_sessionidx", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_domain_sessionidx.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_sessionidx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_sessionidx is null\n\n\n", "column_name": "domain_sessionidx"}, "error": null, "status": null, "execution_time": 0.012190103530883789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.845379Z", "completed_at": "2021-11-22T12:15:29.851901Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.857010Z", "completed_at": "2021-11-22T12:15:29.857014Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_domain_userid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.011539936065673828, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.851865Z", "completed_at": "2021-11-22T12:15:29.857768Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.858027Z", "completed_at": "2021-11-22T12:15:29.858031Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_end_tstamp.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.011544942855834961, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.857945Z", "completed_at": "2021-11-22T12:15:29.868849Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.868989Z", "completed_at": "2021-11-22T12:15:29.868993Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_engaged_time_in_s.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.0117340087890625, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.863792Z", "completed_at": "2021-11-22T12:15:29.869555Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.870305Z", "completed_at": "2021-11-22T12:15:29.870308Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "first_page_url", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_first_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_first_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_first_page_url.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_first_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_first_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_first_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere first_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere first_page_url is null\n\n\n", "column_name": "first_page_url"}, "error": null, "status": null, "execution_time": 0.011723995208740234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.869670Z", "completed_at": "2021-11-22T12:15:29.875897Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.880878Z", "completed_at": "2021-11-22T12:15:29.880882Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "last_page_url", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_last_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_last_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_last_page_url.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_last_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_last_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_last_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere last_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere last_page_url is null\n\n\n", "column_name": "last_page_url"}, "error": null, "status": null, "execution_time": 0.006407976150512695, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.875845Z", "completed_at": "2021-11-22T12:15:29.881421Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.881761Z", "completed_at": "2021-11-22T12:15:29.881764Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_network_userid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.012177228927612305, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.882000Z", "completed_at": "2021-11-22T12:15:29.893419Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.893557Z", "completed_at": "2021-11-22T12:15:29.893562Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_page_views"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_page_views", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_page_views.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_page_views", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_page_views", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_page_views.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere page_views is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere page_views is null\n\n\n", "column_name": "page_views"}, "error": null, "status": null, "execution_time": 0.006994724273681641, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.887556Z", "completed_at": "2021-11-22T12:15:29.893961Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.894201Z", "completed_at": "2021-11-22T12:15:29.894204Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_this_run_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_this_run_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_this_run_start_tstamp.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "not_null_snowplow_web_sessions_this_run_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_this_run_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/not_null_snowplow_web_sessions_this_run_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.010936975479125977, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.894307Z", "completed_at": "2021-11-22T12:15:29.904685Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.904806Z", "completed_at": "2021-11-22T12:15:29.904809Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_sessions_this_run_domain_sessionid"], "unique_id": "test.snowplow_web.unique_snowplow_web_sessions_this_run_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_sessions_this_run_domain_sessionid.sql", "original_file_path": "models/sessions/scratch/sessions_scratch.yml", "name": "unique_snowplow_web_sessions_this_run_domain_sessionid", "resource_type": "test", "alias": "unique_snowplow_web_sessions_this_run_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/scratch/sessions_scratch.yml/schema_test/unique_snowplow_web_sessions_this_run_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.005857229232788086, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.899726Z", "completed_at": "2021-11-22T12:15:29.905132Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:29.905255Z", "completed_at": "2021-11-22T12:15:29.905258Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='incremental',\n    unique_key='domain_userid',\n    sort='end_tstamp',\n    dist='domain_userid',\n    partition_by = {\n      \"field\": \"end_tstamp\",\n      \"data_type\": \"timestamp\"},\n    tags=[\"derived\"]\n  ) \n}}\n\n\nselect distinct\n  domain_userid,\n  last_value(user_id) over(\n    partition by domain_userid \n    order by collector_tstamp \n    rows between unbounded preceding and unbounded following\n  ) as user_id,\n  max(collector_tstamp) over (partition by domain_userid) as end_tstamp\n\nfrom {{ ref('snowplow_web_base_events_this_run') }}\n\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_web') }} --returns false if run doesn't contain new events.\nand user_id is not null\nand domain_userid is not null", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_derived", "fqn": ["snowplow_web", "user_mapping", "snowplow_web_user_mapping"], "unique_id": "model.snowplow_web.snowplow_web_user_mapping", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "user_mapping/snowplow_web_user_mapping.sql", "original_file_path": "models/user_mapping/snowplow_web_user_mapping.sql", "name": "snowplow_web_user_mapping", "resource_type": "model", "alias": "snowplow_web_user_mapping", "checksum": {"name": "sha256", "checksum": "06f632961c26d2693e700824f2e74929654e1f63bfc1b8cbcd91cd4ffe35f585"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "derived", "database": null, "tags": ["snowplow_web_incremental", "derived"], "full_refresh": null, "partition_by": {"field": "end_tstamp", "data_type": "timestamp"}, "unique_key": "domain_userid", "sort": "end_tstamp", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "derived"], "refs": [["snowplow_web_base_events_this_run"], ["snowplow_web_base_new_event_limits"], ["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.is_run_with_new_events"], "nodes": ["model.snowplow_web.snowplow_web_base_events_this_run", "model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "A mapping table between `domain_userid` and `user_id`.", "columns": {"domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "The `collector_tstamp` when the user was last active", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/user_mapping/user_mapping.yml", "build_path": "target/compiled/snowplow_web/models/user_mapping/snowplow_web_user_mapping.sql", "deferred": false, "compiled_sql": "\n\n\nselect distinct\n  domain_userid,\n  last_value(user_id) over(\n    partition by domain_userid \n    order by collector_tstamp \n    rows between unbounded preceding and unbounded following\n  ) as user_id,\n  max(collector_tstamp) over (partition by domain_userid) as end_tstamp\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\n\nwhere cast(0 as boolean) --returns false if run doesn't contain new events.\nand user_id is not null\nand domain_userid is not null", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nselect distinct\n  domain_userid,\n  last_value(user_id) over(\n    partition by domain_userid \n    order by collector_tstamp \n    rows between unbounded preceding and unbounded following\n  ) as user_id,\n  max(collector_tstamp) over (partition by domain_userid) as end_tstamp\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_events_this_run\n\nwhere cast(0 as boolean) --returns false if run doesn't contain new events.\nand user_id is not null\nand domain_userid is not null"}, "error": null, "status": null, "execution_time": 1.4588401317596436, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.489131Z", "completed_at": "2021-11-22T12:15:30.936999Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:30.937598Z", "completed_at": "2021-11-22T12:15:30.937611Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_user_mapping') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_user_mapping_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_user_mapping_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_user_mapping_end_tstamp.sql", "original_file_path": "models/user_mapping/user_mapping.yml", "name": "not_null_snowplow_web_user_mapping_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_user_mapping_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_user_mapping"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_user_mapping"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/user_mapping/user_mapping.yml/schema_test/not_null_snowplow_web_user_mapping_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.06269121170043945, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:30.952542Z", "completed_at": "2021-11-22T12:15:31.002669Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.002848Z", "completed_at": "2021-11-22T12:15:31.002854Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_user_mapping') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_user_mapping_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_user_mapping_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_user_mapping_domain_userid.sql", "original_file_path": "models/user_mapping/user_mapping.yml", "name": "not_null_snowplow_web_user_mapping_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_user_mapping_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_user_mapping"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_user_mapping"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/user_mapping/user_mapping.yml/schema_test/not_null_snowplow_web_user_mapping_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.06368589401245117, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:30.940833Z", "completed_at": "2021-11-22T12:15:31.002974Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.003310Z", "completed_at": "2021-11-22T12:15:31.003314Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('snowplow_web_user_mapping') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_user_mapping_user_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_user_mapping_user_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_user_mapping_user_id.sql", "original_file_path": "models/user_mapping/user_mapping.yml", "name": "not_null_snowplow_web_user_mapping_user_id", "resource_type": "test", "alias": "not_null_snowplow_web_user_mapping_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_user_mapping"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_user_mapping"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/user_mapping/user_mapping.yml/schema_test/not_null_snowplow_web_user_mapping_user_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\nwhere user_id is null\n\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.013804197311401367, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.004052Z", "completed_at": "2021-11-22T12:15:31.016991Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.017251Z", "completed_at": "2021-11-22T12:15:31.017256Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_user_mapping') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_user_mapping_domain_userid"], "unique_id": "test.snowplow_web.unique_snowplow_web_user_mapping_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_user_mapping_domain_userid.sql", "original_file_path": "models/user_mapping/user_mapping.yml", "name": "unique_snowplow_web_user_mapping_domain_userid", "resource_type": "test", "alias": "unique_snowplow_web_user_mapping_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_user_mapping"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_user_mapping"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/user_mapping/user_mapping.yml/schema_test/unique_snowplow_web_user_mapping_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_user_mapping\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.013774871826171875, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.010645Z", "completed_at": "2021-11-22T12:15:31.017122Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.017371Z", "completed_at": "2021-11-22T12:15:31.017373Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized=var(\"snowplow__incremental_materialization\"),\n    unique_key='page_view_id',\n    upsert_date_key='start_tstamp',\n    sort='start_tstamp',\n    dist='page_view_id',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_web.cluster_by_fields_page_views(),\n    tags=[\"derived\"]\n  ) \n}}\n\n\nselect * \nfrom {{ ref('snowplow_web_page_views_this_run') }}\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_web') }} --returns false if run doesn't contain new events.", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_derived", "fqn": ["snowplow_web", "page_views", "snowplow_web_page_views"], "unique_id": "model.snowplow_web.snowplow_web_page_views", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "page_views/snowplow_web_page_views.sql", "original_file_path": "models/page_views/snowplow_web_page_views.sql", "name": "snowplow_web_page_views", "resource_type": "model", "alias": "snowplow_web_page_views", "checksum": {"name": "sha256", "checksum": "b95ddc24af6cb8725969786bf0144246bcf2b512e8c5c917ea5e65b40e014319"}, "config": {"enabled": true, "materialized": "snowplow_incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "derived", "database": null, "tags": ["snowplow_web_incremental", "derived"], "full_refresh": null, "cluster_by": ["domain_userid", "domain_sessionid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "unique_key": "page_view_id", "upsert_date_key": "start_tstamp", "sort": "start_tstamp", "dist": "page_view_id"}, "tags": ["snowplow_web_incremental", "derived"], "refs": [["snowplow_web_page_views_this_run"], ["snowplow_web_base_new_event_limits"], ["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.cluster_by_fields_page_views", "macro.snowplow_utils.is_run_with_new_events"], "nodes": ["model.snowplow_web.snowplow_web_page_views_this_run", "model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "This derived incremental table contains all historic page views and should be the end point for any analysis or BI tools.", "columns": {"page_view_id": {"name": "page_view_id", "description": "A UUID for each page view e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "event_id": {"name": "event_id", "description": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": []}, "app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "tags": []}, "page_view_in_session_index": {"name": "page_view_in_session_index", "description": "A page view index within a single session", "meta": {}, "data_type": null, "tags": []}, "page_views_in_session": {"name": "page_views_in_session", "description": "Distinct count of `page_view_id` within a session", "meta": {}, "data_type": null, "tags": []}, "dvce_created_tstamp": {"name": "dvce_created_tstamp", "description": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019", "meta": {}, "data_type": null, "tags": []}, "collector_tstamp": {"name": "collector_tstamp", "description": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "tags": []}, "derived_tstamp": {"name": "derived_tstamp", "description": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the page view, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the end of the page view, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "Time spent by the user on the page calculated using page pings.", "meta": {}, "data_type": null, "tags": []}, "absolute_time_in_s": {"name": "absolute_time_in_s", "description": "The time in seconds between the `start_tstamp` and `end_tstamp`", "meta": {}, "data_type": null, "tags": []}, "horizontal_pixels_scrolled": {"name": "horizontal_pixels_scrolled", "description": "Distance the user scrolled horizontally in pixels", "meta": {}, "data_type": null, "tags": []}, "vertical_pixels_scrolled": {"name": "vertical_pixels_scrolled", "description": "Distance the user scrolled vertically in pixels", "meta": {}, "data_type": null, "tags": []}, "horizontal_percentage_scrolled": {"name": "horizontal_percentage_scrolled", "description": "Percentage of page scrolled horizontally", "meta": {}, "data_type": null, "tags": []}, "vertical_percentage_scrolled": {"name": "vertical_percentage_scrolled", "description": "Percentage of page scrolled vertically", "meta": {}, "data_type": null, "tags": []}, "doc_width": {"name": "doc_width", "description": "The page\u2019s width in pixels e.g. 1024", "meta": {}, "data_type": null, "tags": []}, "doc_height": {"name": "doc_height", "description": "The page\u2019s height in pixels e.g. 3000", "meta": {}, "data_type": null, "tags": []}, "page_title": {"name": "page_title", "description": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019", "meta": {}, "data_type": null, "tags": []}, "page_url": {"name": "page_url", "description": "The page URL e.g. \u2018http://www.example.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlscheme": {"name": "page_urlscheme", "description": "Scheme aka protocol e.g. \u2018https\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlhost": {"name": "page_urlhost", "description": "Host aka domain e.g. \u2018\u201cwww.snowplowanalytics.com\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlpath": {"name": "page_urlpath", "description": "Path to page e.g. \u2018/product/index.html\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlquery": {"name": "page_urlquery", "description": "Querystring e.g. \u2018id=GTM-DLRG\u2019", "meta": {}, "data_type": null, "tags": []}, "page_urlfragment": {"name": "page_urlfragment", "description": "Fragment aka anchor e.g. \u20184-conclusion\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}, "page_referrer": {"name": "page_referrer", "description": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "tags": []}, "br_viewwidth": {"name": "br_viewwidth", "description": "Viewport width e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "br_viewheight": {"name": "br_viewheight", "description": "Viewport height e.g. 1000", "meta": {}, "data_type": null, "tags": []}, "br_colordepth": {"name": "br_colordepth", "description": "Bit depth of the browser color palette e.g. 24", "meta": {}, "data_type": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "category": {"name": "category", "description": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise", "meta": {}, "data_type": null, "tags": []}, "primary_impact": {"name": "primary_impact", "description": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise", "meta": {}, "data_type": null, "tags": []}, "spider_or_robot": {"name": "spider_or_robot", "description": "True if the IP address or user agent checked against the list is a spider or robot, false otherwise", "meta": {}, "data_type": null, "tags": []}, "useragent_family": {"name": "useragent_family", "description": "Useragent family (browser) name", "meta": {}, "data_type": null, "tags": []}, "useragent_major": {"name": "useragent_major", "description": "Useragent major version", "meta": {}, "data_type": null, "tags": []}, "useragent_minor": {"name": "useragent_minor", "description": "Useragent minor version", "meta": {}, "data_type": null, "tags": []}, "useragent_patch": {"name": "useragent_patch", "description": "Useragent patch version", "meta": {}, "data_type": null, "tags": []}, "useragent_version": {"name": "useragent_version", "description": "Full version of the useragent", "meta": {}, "data_type": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "tags": []}, "os_major": {"name": "os_major", "description": "Operation system major version", "meta": {}, "data_type": null, "tags": []}, "os_minor": {"name": "os_minor", "description": "Operation system minor version", "meta": {}, "data_type": null, "tags": []}, "os_patch": {"name": "os_patch", "description": "Operation system patch version", "meta": {}, "data_type": null, "tags": []}, "os_patch_minor": {"name": "os_patch_minor", "description": "Operation system patch minor version", "meta": {}, "data_type": null, "tags": []}, "os_version": {"name": "os_version", "description": "Operation system full version", "meta": {}, "data_type": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device type", "meta": {}, "data_type": null, "tags": []}, "device_class": {"name": "device_class", "description": "Class of device e.g. phone", "meta": {}, "data_type": null, "tags": []}, "agent_class": {"name": "agent_class", "description": "Class of agent e.g. browser", "meta": {}, "data_type": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of agent e.g. Chrome", "meta": {}, "data_type": null, "tags": []}, "agent_name_version": {"name": "agent_name_version", "description": "Name and version of agent e.g. Chrome 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_name_version_major": {"name": "agent_name_version_major", "description": "Name and major version of agent e.g. Chrome 53", "meta": {}, "data_type": null, "tags": []}, "agent_version": {"name": "agent_version", "description": "Version of agent e.g. 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_version_major": {"name": "agent_version_major", "description": "Major version of agent e.g. 53", "meta": {}, "data_type": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device e.g. Google", "meta": {}, "data_type": null, "tags": []}, "device_name": {"name": "device_name", "description": "Name of device e.g. Google Nexus 6", "meta": {}, "data_type": null, "tags": []}, "device_version": {"name": "device_version", "description": "Version of device e.g. 6.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_class": {"name": "layout_engine_class", "description": "Class of layout engine e.g. Browser", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name": {"name": "layout_engine_name", "description": "Name of layout engine e.g. Blink", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version": {"name": "layout_engine_name_version", "description": "Name and version of layout engine e.g. Blink 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version_major": {"name": "layout_engine_name_version_major", "description": "Name and major version of layout engine e.g. Blink 53", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version": {"name": "layout_engine_version", "description": "Version of layout engine e.g. 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version_major": {"name": "layout_engine_version_major", "description": "Major version of layout engine e.g. 53", "meta": {}, "data_type": null, "tags": []}, "operating_system_class": {"name": "operating_system_class", "description": "Class of the OS e.g. Mobile", "meta": {}, "data_type": null, "tags": []}, "operating_system_name": {"name": "operating_system_name", "description": "Name of the OS e.g. Android", "meta": {}, "data_type": null, "tags": []}, "operating_system_name_version": {"name": "operating_system_name_version", "description": "Name and version of the OS e.g. Android 7.0", "meta": {}, "data_type": null, "tags": []}, "operating_system_version": {"name": "operating_system_version", "description": "Version of the OS e.g. 7.0", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/page_views/page_views.yml", "build_path": "target/compiled/snowplow_web/models/page_views/snowplow_web_page_views.sql", "deferred": false, "compiled_sql": "\n\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events.", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_page_views_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events."}, "error": null, "status": null, "execution_time": 1.487644910812378, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:29.644281Z", "completed_at": "2021-11-22T12:15:31.131024Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.131226Z", "completed_at": "2021-11-22T12:15:31.131233Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Removing model_tstamp\n\nselect\n  page_view_id,\n  event_id,\n\n  app_id,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  page_view_in_session_index,\n  page_views_in_session,\n\n  -- timestamp fields\n  dvce_created_tstamp,\n  collector_tstamp,\n  derived_tstamp,\n  start_tstamp,\n  end_tstamp,\n\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  horizontal_pixels_scrolled,\n  vertical_pixels_scrolled,\n\n  horizontal_percentage_scrolled,\n  vertical_percentage_scrolled,\n\n  doc_width,\n  doc_height,\n\n  page_title,\n  page_url,\n  page_urlscheme,\n  page_urlhost,\n  page_urlpath,\n  page_urlquery,\n  page_urlfragment,\n\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  page_referrer,\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  user_ipaddress,\n\n  useragent,\n\n  br_lang,\n  br_viewwidth,\n  br_viewheight,\n  br_colordepth,\n  br_renderengine,\n\n  os_timezone,\n\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom {{ ref('snowplow_web_page_views') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "actual", "snowplow_web_page_views_actual"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_page_views_actual", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "actual/snowplow_web_page_views_actual.sql", "original_file_path": "models/actual/snowplow_web_page_views_actual.sql", "name": "snowplow_web_page_views_actual", "resource_type": "model", "alias": "snowplow_web_page_views_actual", "checksum": {"name": "sha256", "checksum": "a0d1dab1ccd9df27e8f5eac6d1b78204e969dee1f4cc38cac594e6cc3c1f5958"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/actual/actual_vs_expected.yml", "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/snowplow_web_page_views_actual.sql", "deferred": false, "compiled_sql": "-- Removing model_tstamp\n\nselect\n  page_view_id,\n  event_id,\n\n  app_id,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  page_view_in_session_index,\n  page_views_in_session,\n\n  -- timestamp fields\n  dvce_created_tstamp,\n  collector_tstamp,\n  derived_tstamp,\n  start_tstamp,\n  end_tstamp,\n\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  horizontal_pixels_scrolled,\n  vertical_pixels_scrolled,\n\n  horizontal_percentage_scrolled,\n  vertical_percentage_scrolled,\n\n  doc_width,\n  doc_height,\n\n  page_title,\n  page_url,\n  page_urlscheme,\n  page_urlhost,\n  page_urlpath,\n  page_urlquery,\n  page_urlfragment,\n\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  page_referrer,\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  user_ipaddress,\n\n  useragent,\n\n  br_lang,\n  br_viewwidth,\n  br_viewheight,\n  br_colordepth,\n  br_renderengine,\n\n  os_timezone,\n\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Removing model_tstamp\n\nselect\n  page_view_id,\n  event_id,\n\n  app_id,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  page_view_in_session_index,\n  page_views_in_session,\n\n  -- timestamp fields\n  dvce_created_tstamp,\n  collector_tstamp,\n  derived_tstamp,\n  start_tstamp,\n  end_tstamp,\n\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  horizontal_pixels_scrolled,\n  vertical_pixels_scrolled,\n\n  horizontal_percentage_scrolled,\n  vertical_percentage_scrolled,\n\n  doc_width,\n  doc_height,\n\n  page_title,\n  page_url,\n  page_urlscheme,\n  page_urlhost,\n  page_urlpath,\n  page_urlquery,\n  page_urlfragment,\n\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  page_referrer,\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  user_ipaddress,\n\n  useragent,\n\n  br_lang,\n  br_viewwidth,\n  br_viewheight,\n  br_colordepth,\n  br_renderengine,\n\n  os_timezone,\n\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views"}, "error": null, "status": null, "execution_time": 0.021514892578125, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.132810Z", "completed_at": "2021-11-22T12:15:31.153381Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.153614Z", "completed_at": "2021-11-22T12:15:31.153620Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "absolute_time_in_s", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_absolute_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_absolute_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_absolute_time_in_s.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_absolute_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_absolute_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_absolute_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere absolute_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere absolute_time_in_s is null\n\n\n", "column_name": "absolute_time_in_s"}, "error": null, "status": null, "execution_time": 0.022619247436523438, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.133069Z", "completed_at": "2021-11-22T12:15:31.154035Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.154652Z", "completed_at": "2021-11-22T12:15:31.154656Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "collector_tstamp", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_collector_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_collector_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_collector_tstamp.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_collector_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_collector_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_collector_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere collector_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere collector_tstamp is null\n\n\n", "column_name": "collector_tstamp"}, "error": null, "status": null, "execution_time": 0.022560834884643555, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.139944Z", "completed_at": "2021-11-22T12:15:31.154150Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.154823Z", "completed_at": "2021-11-22T12:15:31.154826Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "derived_tstamp", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_derived_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_derived_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_derived_tstamp.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_derived_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_derived_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_derived_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere derived_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere derived_tstamp is null\n\n\n", "column_name": "derived_tstamp"}, "error": null, "status": null, "execution_time": 0.020467042922973633, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.155536Z", "completed_at": "2021-11-22T12:15:31.163550Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.175130Z", "completed_at": "2021-11-22T12:15:31.175134Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_domain_sessionid.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.01853799819946289, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.163356Z", "completed_at": "2021-11-22T12:15:31.175855Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.176114Z", "completed_at": "2021-11-22T12:15:31.176117Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionidx", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_domain_sessionidx"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_domain_sessionidx", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_domain_sessionidx.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_domain_sessionidx", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_domain_sessionidx", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_domain_sessionidx.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_sessionidx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_sessionidx is null\n\n\n", "column_name": "domain_sessionidx"}, "error": null, "status": null, "execution_time": 0.018513917922973633, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.163488Z", "completed_at": "2021-11-22T12:15:31.175950Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.176225Z", "completed_at": "2021-11-22T12:15:31.176228Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_domain_userid.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.011816978454589844, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.176059Z", "completed_at": "2021-11-22T12:15:31.182123Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.182391Z", "completed_at": "2021-11-22T12:15:31.182394Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "dvce_created_tstamp", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_dvce_created_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_dvce_created_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_dvce_created_tstamp.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_dvce_created_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_dvce_created_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_dvce_created_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere dvce_created_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere dvce_created_tstamp is null\n\n\n", "column_name": "dvce_created_tstamp"}, "error": null, "status": null, "execution_time": 0.016909122467041016, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.182340Z", "completed_at": "2021-11-22T12:15:31.192915Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.193100Z", "completed_at": "2021-11-22T12:15:31.193103Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_end_tstamp.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.017041921615600586, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.182500Z", "completed_at": "2021-11-22T12:15:31.193186Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.198958Z", "completed_at": "2021-11-22T12:15:31.198961Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_engaged_time_in_s.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.012156963348388672, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.193024Z", "completed_at": "2021-11-22T12:15:31.199521Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.199780Z", "completed_at": "2021-11-22T12:15:31.199783Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_event_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_event_id.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_event_id", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.018077373504638672, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.199732Z", "completed_at": "2021-11-22T12:15:31.210317Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.210515Z", "completed_at": "2021-11-22T12:15:31.210518Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_network_userid.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.01807093620300293, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.205013Z", "completed_at": "2021-11-22T12:15:31.216490Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.217567Z", "completed_at": "2021-11-22T12:15:31.217571Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_url", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_page_url.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_url is null\n\n\n", "column_name": "page_url"}, "error": null, "status": null, "execution_time": 0.014020919799804688, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.210437Z", "completed_at": "2021-11-22T12:15:31.218172Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.218448Z", "completed_at": "2021-11-22T12:15:31.218451Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_page_view_id"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_page_view_id.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_page_view_id", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_view_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_view_id is null\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.01817488670349121, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.218392Z", "completed_at": "2021-11-22T12:15:31.230059Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.230342Z", "completed_at": "2021-11-22T12:15:31.230348Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_view_in_session_index", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_page_view_in_session_index"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_view_in_session_index", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_page_view_in_session_index.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_page_view_in_session_index", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_page_view_in_session_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_page_view_in_session_index.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_view_in_session_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_view_in_session_index is null\n\n\n", "column_name": "page_view_in_session_index"}, "error": null, "status": null, "execution_time": 0.018151044845581055, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.224270Z", "completed_at": "2021-11-22T12:15:31.236015Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.236353Z", "completed_at": "2021-11-22T12:15:31.236356Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views_in_session", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_page_views_in_session"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_views_in_session", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_page_views_in_session.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_page_views_in_session", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_page_views_in_session", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_page_views_in_session.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_views_in_session is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere page_views_in_session is null\n\n\n", "column_name": "page_views_in_session"}, "error": null, "status": null, "execution_time": 0.0076177120208740234, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.230254Z", "completed_at": "2021-11-22T12:15:31.236770Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.237097Z", "completed_at": "2021-11-22T12:15:31.237100Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with prep as (\n  select \n    domain_sessionid, \n    count(distinct page_views_in_session) as dist_pvis_values,\n    count(*) - count(distinct page_view_in_session_index)  as all_minus_dist_pvisi,\n    count(*) - count(distinct page_view_id) as all_minus_dist_pvids \n\n  from {{ ref('snowplow_web_page_views') }}\n  group by 1\n)\n\nselect\n  domain_sessionid\n\nfrom prep\n\nwhere dist_pvis_values != 1\nor all_minus_dist_pvisi != 0\nor all_minus_dist_pvids != 0", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_derived", "fqn": ["snowplow_web", "page_views", "data_test", "snowplow_tests_page_view_in_session_values"], "unique_id": "test.snowplow_web.snowplow_tests_page_view_in_session_values", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "page_views/data_test/snowplow_tests_page_view_in_session_values.sql", "original_file_path": "tests/page_views/snowplow_tests_page_view_in_session_values.sql", "name": "snowplow_tests_page_view_in_session_values", "resource_type": "test", "alias": "snowplow_tests_page_view_in_session_values", "checksum": {"name": "sha256", "checksum": "e4afb8566741fe06488dbc613c0541ef62975a31d1c43035ff2a240fbfacc5e8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "derived", "database": null, "tags": ["snowplow_web_incremental"], "full_refresh": null, "severity": "ERROR"}, "tags": ["snowplow_web_incremental", "data"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/tests/page_views/snowplow_tests_page_view_in_session_values.sql", "deferred": false, "compiled_sql": "\nselect count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\nwith prep as (\n  select \n    domain_sessionid, \n    count(distinct page_views_in_session) as dist_pvis_values,\n    count(*) - count(distinct page_view_in_session_index)  as all_minus_dist_pvisi,\n    count(*) - count(distinct page_view_id) as all_minus_dist_pvids \n\n  from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n  group by 1\n)\n\nselect\n  domain_sessionid\n\nfrom prep\n\nwhere dist_pvis_values != 1\nor all_minus_dist_pvisi != 0\nor all_minus_dist_pvids != 0\n)"}], "injected_sql": "\nwith dbt__CTE__INTERNAL_test as (\nwith prep as (\n  select \n    domain_sessionid, \n    count(distinct page_views_in_session) as dist_pvis_values,\n    count(*) - count(distinct page_view_in_session_index)  as all_minus_dist_pvisi,\n    count(*) - count(distinct page_view_id) as all_minus_dist_pvids \n\n  from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n  group by 1\n)\n\nselect\n  domain_sessionid\n\nfrom prep\n\nwhere dist_pvis_values != 1\nor all_minus_dist_pvisi != 0\nor all_minus_dist_pvids != 0\n)select count(*) from dbt__CTE__INTERNAL_test"}, "error": null, "status": null, "execution_time": 0.020086050033569336, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.243345Z", "completed_at": "2021-11-22T12:15:31.257026Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.257157Z", "completed_at": "2021-11-22T12:15:31.257163Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_page_views_event_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_event_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_page_views_event_id.sql", "original_file_path": "models/page_views/page_views.yml", "name": "unique_snowplow_web_page_views_event_id", "resource_type": "test", "alias": "unique_snowplow_web_page_views_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/unique_snowplow_web_page_views_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.013412952423095703, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.249919Z", "completed_at": "2021-11-22T12:15:31.262734Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.262869Z", "completed_at": "2021-11-22T12:15:31.262873Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_page_views_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_page_views_start_tstamp.sql", "original_file_path": "models/page_views/page_views.yml", "name": "not_null_snowplow_web_page_views_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_page_views_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/not_null_snowplow_web_page_views_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.027659893035888672, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.237205Z", "completed_at": "2021-11-22T12:15:31.263782Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.264046Z", "completed_at": "2021-11-22T12:15:31.264049Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ ref('snowplow_web_page_views') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_page_views_page_view_id"], "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_page_view_id", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_page_views_page_view_id.sql", "original_file_path": "models/page_views/page_views.yml", "name": "unique_snowplow_web_page_views_page_view_id", "resource_type": "test", "alias": "unique_snowplow_web_page_views_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_page_views"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_page_views"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/page_views/page_views.yml/schema_test/unique_snowplow_web_page_views_page_view_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        page_view_id\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_page_views\n    where page_view_id is not null\n    group by page_view_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "page_view_id"}, "error": null, "status": null, "execution_time": 0.013907909393310547, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.257589Z", "completed_at": "2021-11-22T12:15:31.264163Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.264757Z", "completed_at": "2021-11-22T12:15:31.264760Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equal_rowcount(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equal_rowcount", "kwargs": {"compare_model": "ref('snowplow_web_page_views_expected_stg')", "model": "{{ ref('snowplow_web_page_views_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equal_rowcount_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equal_rowcount_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equal_rowcount_snowplow_web_page_views_actual_657de85c583fd057ef4f141f1d0c3f88.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equal_rowcount_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equal_rowcount_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_page_views_expected_stg"], ["snowplow_web_page_views_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_page_views_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_page_views_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equal_rowcount_snowplow_web_page_views_actual_657de85c583fd057ef4f141f1d0c3f88.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.019504070281982422, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.264266Z", "completed_at": "2021-11-22T12:15:31.278191Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:31.282984Z", "completed_at": "2021-11-22T12:15:31.282997Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('snowplow_web_page_views_expected_stg')", "model": "{{ ref('snowplow_web_page_views_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equality_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equality_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equality_snowplow_web_page_views_actual_657de85c583fd057ef4f141f1d0c3f88.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equality_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equality_snowplow_web_page_views_actual_ref_snowplow_web_page_views_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_page_views_expected_stg"], ["snowplow_web_page_views_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_page_views_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_page_views_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equality_snowplow_web_page_views_actual_657de85c583fd057ef4f141f1d0c3f88.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected_stg\n\n),\n\na_minus_b as (\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n    \n\n    except distinct\n\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n\n),\n\nb_minus_a as (\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n    \n\n    except distinct\n\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_page_views_expected_stg\n\n),\n\na_minus_b as (\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n    \n\n    except distinct\n\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n\n),\n\nb_minus_a as (\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n    \n\n    except distinct\n\n\n    select `page_view_id`, `event_id`, `app_id`, `user_id`, `domain_userid`, `network_userid`, `domain_sessionid`, `domain_sessionidx`, `page_view_in_session_index`, `page_views_in_session`, `dvce_created_tstamp`, `collector_tstamp`, `derived_tstamp`, `start_tstamp`, `end_tstamp`, `engaged_time_in_s`, `absolute_time_in_s`, `horizontal_pixels_scrolled`, `vertical_pixels_scrolled`, `horizontal_percentage_scrolled`, `vertical_percentage_scrolled`, `doc_width`, `doc_height`, `page_title`, `page_url`, `page_urlscheme`, `page_urlhost`, `page_urlpath`, `page_urlquery`, `page_urlfragment`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `page_referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_lang`, `br_viewwidth`, `br_viewheight`, `br_colordepth`, `br_renderengine`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.7731008529663086, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:31.271697Z", "completed_at": "2021-11-22T12:15:32.043646Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.044049Z", "completed_at": "2021-11-22T12:15:32.044061Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized=var(\"snowplow__incremental_materialization\"),\n    unique_key='domain_sessionid',\n    upsert_date_key='start_tstamp',\n    sort='start_tstamp',\n    dist='domain_sessionid',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_web.cluster_by_fields_sessions(),\n    tags=[\"derived\"],\n    post_hook=\"{{ snowplow_web.stitch_user_identifiers(\n      enabled=var('snowplow__session_stitching')\n      ) }}\"\n  ) \n}}\n\n\nselect * \nfrom {{ ref('snowplow_web_sessions_this_run') }}\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_web') }} --returns false if run doesn't contain new events.", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_derived", "fqn": ["snowplow_web", "sessions", "snowplow_web_sessions"], "unique_id": "model.snowplow_web.snowplow_web_sessions", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "sessions/snowplow_web_sessions.sql", "original_file_path": "models/sessions/snowplow_web_sessions.sql", "name": "snowplow_web_sessions", "resource_type": "model", "alias": "snowplow_web_sessions", "checksum": {"name": "sha256", "checksum": "611ef544cc31f57691304c4b9fef21977e66e22e358d7a640d2800679b56435f"}, "config": {"enabled": true, "materialized": "snowplow_incremental", "persist_docs": {}, "post-hook": [{"sql": "{{ snowplow_web.stitch_user_identifiers(\n      enabled=var('snowplow__session_stitching')\n      ) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "derived", "database": null, "tags": ["snowplow_web_incremental", "derived"], "full_refresh": null, "cluster_by": ["domain_userid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "unique_key": "domain_sessionid", "upsert_date_key": "start_tstamp", "sort": "start_tstamp", "dist": "domain_sessionid"}, "tags": ["snowplow_web_incremental", "derived"], "refs": [["snowplow_web_sessions_this_run"], ["snowplow_web_base_new_event_limits"], ["snowplow_web_incremental_manifest"], ["snowplow_web_user_mapping"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.cluster_by_fields_sessions", "macro.snowplow_utils.is_run_with_new_events", "macro.snowplow_web.stitch_user_identifiers"], "nodes": ["model.snowplow_web.snowplow_web_sessions_this_run", "model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_incremental_manifest", "model.snowplow_web.snowplow_web_user_mapping"]}, "description": "This derived incremental table contains all historic sessions and should be the end point for any analysis or BI tools.", "columns": {"app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the session, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the end of the session, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "page_views": {"name": "page_views", "description": "The number of distinct page views within a session", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "The total time engaged by a user within a session", "meta": {}, "data_type": null, "tags": []}, "absolute_time_in_s": {"name": "absolute_time_in_s", "description": "The time in seconds between the `start_tstamp` and `end_tstamp`", "meta": {}, "data_type": null, "tags": []}, "first_page_title": {"name": "first_page_title", "description": "The title of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_url": {"name": "first_page_url", "description": "The url of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlscheme": {"name": "first_page_urlscheme", "description": "The urlscheme of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlhost": {"name": "first_page_urlhost", "description": "The urlhost of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlpath": {"name": "first_page_urlpath", "description": "The urlpath of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlquery": {"name": "first_page_urlquery", "description": "The urlquery of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "first_page_urlfragment": {"name": "first_page_urlfragment", "description": "The urlfragment of the first page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_title": {"name": "last_page_title", "description": "The title of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_url": {"name": "last_page_url", "description": "The url of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlscheme": {"name": "last_page_urlscheme", "description": "The urlscheme of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlhost": {"name": "last_page_urlhost", "description": "The urlhost of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlpath": {"name": "last_page_urlpath", "description": "The urlpath of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlquery": {"name": "last_page_urlquery", "description": "The urlquery of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "last_page_urlfragment": {"name": "last_page_urlfragment", "description": "The urlfragment of the last page visited within the session", "meta": {}, "data_type": null, "tags": []}, "referrer": {"name": "referrer", "description": "The referrer associated with the first page view of the session", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "tags": []}, "category": {"name": "category", "description": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise", "meta": {}, "data_type": null, "tags": []}, "primary_impact": {"name": "primary_impact", "description": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise", "meta": {}, "data_type": null, "tags": []}, "spider_or_robot": {"name": "spider_or_robot", "description": "True if the IP address or user agent checked against the list is a spider or robot, false otherwise", "meta": {}, "data_type": null, "tags": []}, "useragent_family": {"name": "useragent_family", "description": "Useragent family (browser) name", "meta": {}, "data_type": null, "tags": []}, "useragent_major": {"name": "useragent_major", "description": "Useragent major version", "meta": {}, "data_type": null, "tags": []}, "useragent_minor": {"name": "useragent_minor", "description": "Useragent minor version", "meta": {}, "data_type": null, "tags": []}, "useragent_patch": {"name": "useragent_patch", "description": "Useragent patch version", "meta": {}, "data_type": null, "tags": []}, "useragent_version": {"name": "useragent_version", "description": "Full version of the useragent", "meta": {}, "data_type": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "tags": []}, "os_major": {"name": "os_major", "description": "Operation system major version", "meta": {}, "data_type": null, "tags": []}, "os_minor": {"name": "os_minor", "description": "Operation system minor version", "meta": {}, "data_type": null, "tags": []}, "os_patch": {"name": "os_patch", "description": "Operation system patch version", "meta": {}, "data_type": null, "tags": []}, "os_patch_minor": {"name": "os_patch_minor", "description": "Operation system patch minor version", "meta": {}, "data_type": null, "tags": []}, "os_version": {"name": "os_version", "description": "Operation system full version", "meta": {}, "data_type": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device type", "meta": {}, "data_type": null, "tags": []}, "device_class": {"name": "device_class", "description": "Class of device e.g. phone", "meta": {}, "data_type": null, "tags": []}, "agent_class": {"name": "agent_class", "description": "Class of agent e.g. browser", "meta": {}, "data_type": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of agent e.g. Chrome", "meta": {}, "data_type": null, "tags": []}, "agent_name_version": {"name": "agent_name_version", "description": "Name and version of agent e.g. Chrome 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_name_version_major": {"name": "agent_name_version_major", "description": "Name and major version of agent e.g. Chrome 53", "meta": {}, "data_type": null, "tags": []}, "agent_version": {"name": "agent_version", "description": "Version of agent e.g. 53.0.2785.124", "meta": {}, "data_type": null, "tags": []}, "agent_version_major": {"name": "agent_version_major", "description": "Major version of agent e.g. 53", "meta": {}, "data_type": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device e.g. Google", "meta": {}, "data_type": null, "tags": []}, "device_name": {"name": "device_name", "description": "Name of device e.g. Google Nexus 6", "meta": {}, "data_type": null, "tags": []}, "device_version": {"name": "device_version", "description": "Version of device e.g. 6.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_class": {"name": "layout_engine_class", "description": "Class of layout engine e.g. Browser", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name": {"name": "layout_engine_name", "description": "Name of layout engine e.g. Blink", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version": {"name": "layout_engine_name_version", "description": "Name and version of layout engine e.g. Blink 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_name_version_major": {"name": "layout_engine_name_version_major", "description": "Name and major version of layout engine e.g. Blink 53", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version": {"name": "layout_engine_version", "description": "Version of layout engine e.g. 53.0", "meta": {}, "data_type": null, "tags": []}, "layout_engine_version_major": {"name": "layout_engine_version_major", "description": "Major version of layout engine e.g. 53", "meta": {}, "data_type": null, "tags": []}, "operating_system_class": {"name": "operating_system_class", "description": "Class of the OS e.g. Mobile", "meta": {}, "data_type": null, "tags": []}, "operating_system_name": {"name": "operating_system_name", "description": "Name of the OS e.g. Android", "meta": {}, "data_type": null, "tags": []}, "operating_system_name_version": {"name": "operating_system_name_version", "description": "Name and version of the OS e.g. Android 7.0", "meta": {}, "data_type": null, "tags": []}, "operating_system_version": {"name": "operating_system_version", "description": "Version of the OS e.g. 7.0", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/sessions/sessions.yml", "build_path": "target/compiled/snowplow_web/models/sessions/snowplow_web_sessions.sql", "deferred": false, "compiled_sql": "\n\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events.", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_sessions_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events."}, "error": null, "status": null, "execution_time": 1.6733808517456055, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:30.940369Z", "completed_at": "2021-11-22T12:15:32.611957Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.612344Z", "completed_at": "2021-11-22T12:15:32.612355Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_userid\"]),\n    sort='start_tstamp',\n    dist='domain_userid',\n    tags=[\"this_run\"]\n  ) \n}}\n\nwith user_ids_this_run as (\nselect distinct domain_userid from {{ ref('snowplow_web_base_sessions_this_run') }}\n)\n\nselect\n  a.*,\n  min(a.start_tstamp) over(partition by a.domain_userid) as user_start_tstamp,\n  max(a.end_tstamp) over(partition by a.domain_userid) as user_end_tstamp \n\nfrom {{ var('snowplow__sessions_table') }} a\ninner join user_ids_this_run b\non a.domain_userid = b.domain_userid", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "users", "scratch", "snowplow_web_users_sessions_this_run"], "unique_id": "model.snowplow_web.snowplow_web_users_sessions_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "users/scratch/snowplow_web_users_sessions_this_run.sql", "original_file_path": "models/users/scratch/snowplow_web_users_sessions_this_run.sql", "name": "snowplow_web_users_sessions_this_run", "resource_type": "model", "alias": "snowplow_web_users_sessions_this_run", "checksum": {"name": "sha256", "checksum": "c503856dc897371fbe8e60d06791d6958b3e164ebd2853262a40290e448b3734"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "full_refresh": null, "cluster_by": ["domain_userid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "start_tstamp", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "refs": [["snowplow_web_base_sessions_this_run"], ["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by"], "nodes": ["model.snowplow_web.snowplow_web_base_sessions_this_run", "model.snowplow_web.snowplow_web_sessions"]}, "description": "This model contains all sessions data related to users contained in the given run of the Web model", "columns": {"domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users/scratch/users_scratch.yml", "build_path": "target/compiled/snowplow_web/models/users/scratch/snowplow_web_users_sessions_this_run.sql", "deferred": false, "compiled_sql": "\n\nwith user_ids_this_run as (\nselect distinct domain_userid from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\n)\n\nselect\n  a.*,\n  min(a.start_tstamp) over(partition by a.domain_userid) as user_start_tstamp,\n  max(a.end_tstamp) over(partition by a.domain_userid) as user_end_tstamp \n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions a\ninner join user_ids_this_run b\non a.domain_userid = b.domain_userid", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith user_ids_this_run as (\nselect distinct domain_userid from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_base_sessions_this_run\n)\n\nselect\n  a.*,\n  min(a.start_tstamp) over(partition by a.domain_userid) as user_start_tstamp,\n  max(a.end_tstamp) over(partition by a.domain_userid) as user_end_tstamp \n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions a\ninner join user_ids_this_run b\non a.domain_userid = b.domain_userid"}, "error": null, "status": null, "execution_time": 0.04248762130737305, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.615257Z", "completed_at": "2021-11-22T12:15:32.655816Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.656210Z", "completed_at": "2021-11-22T12:15:32.656217Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Removing model_tstamp\n\nselect\n  -- app id\n  app_id,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  stitched_user_id,\n  network_userid,\n\n  -- engagement fields\n  page_views,\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  -- geo fields\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  -- ip address\n  user_ipaddress,\n\n  -- user agent\n  useragent,\n\n  br_renderengine,\n  br_lang,\n\n  os_timezone,\n\n  -- optional fields, only populated if in the page views module.\n\n  -- iab enrichment fields\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  -- ua parser enrichment fields\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n\n  -- yauaa enrichment fields\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom {{ ref('snowplow_web_sessions') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "actual", "snowplow_web_sessions_actual"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_sessions_actual", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "actual/snowplow_web_sessions_actual.sql", "original_file_path": "models/actual/snowplow_web_sessions_actual.sql", "name": "snowplow_web_sessions_actual", "resource_type": "model", "alias": "snowplow_web_sessions_actual", "checksum": {"name": "sha256", "checksum": "5ae5491a913ea91caf72a50330e5fa46bc72be2149b2bf1fbc446c028176ab40"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/actual/actual_vs_expected.yml", "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/snowplow_web_sessions_actual.sql", "deferred": false, "compiled_sql": "-- Removing model_tstamp\n\nselect\n  -- app id\n  app_id,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  stitched_user_id,\n  network_userid,\n\n  -- engagement fields\n  page_views,\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  -- geo fields\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  -- ip address\n  user_ipaddress,\n\n  -- user agent\n  useragent,\n\n  br_renderengine,\n  br_lang,\n\n  os_timezone,\n\n  -- optional fields, only populated if in the page views module.\n\n  -- iab enrichment fields\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  -- ua parser enrichment fields\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n\n  -- yauaa enrichment fields\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Removing model_tstamp\n\nselect\n  -- app id\n  app_id,\n\n  -- session fields\n  domain_sessionid,\n  domain_sessionidx,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- user fields\n  user_id,\n  domain_userid,\n  stitched_user_id,\n  network_userid,\n\n  -- engagement fields\n  page_views,\n  engaged_time_in_s,\n  absolute_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network,\n\n  -- geo fields\n  geo_country,\n  geo_region,\n  geo_region_name,\n  geo_city,\n  geo_zipcode,\n  geo_latitude,\n  geo_longitude,\n  geo_timezone,\n\n  -- ip address\n  user_ipaddress,\n\n  -- user agent\n  useragent,\n\n  br_renderengine,\n  br_lang,\n\n  os_timezone,\n\n  -- optional fields, only populated if in the page views module.\n\n  -- iab enrichment fields\n  category,\n  primary_impact,\n  reason,\n  spider_or_robot,\n\n  -- ua parser enrichment fields\n  useragent_family,\n  useragent_major,\n  useragent_minor,\n  useragent_patch,\n  useragent_version,\n  os_family,\n  os_major,\n  os_minor,\n  os_patch,\n  os_patch_minor,\n  os_version,\n  device_family,\n\n  -- yauaa enrichment fields\n  device_class,\n  agent_class,\n  agent_name,\n  agent_name_version,\n  agent_name_version_major,\n  agent_version,\n  agent_version_major,\n  device_brand,\n  device_name,\n  device_version,\n  layout_engine_class,\n  layout_engine_name,\n  layout_engine_name_version,\n  layout_engine_name_version_major,\n  layout_engine_version,\n  layout_engine_version_major,\n  operating_system_class,\n  operating_system_name,\n  operating_system_name_version,\n  operating_system_version\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions"}, "error": null, "status": null, "execution_time": 0.042259931564331055, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.615933Z", "completed_at": "2021-11-22T12:15:32.656006Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.656471Z", "completed_at": "2021-11-22T12:15:32.656476Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_domain_sessionid.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.04279780387878418, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.631355Z", "completed_at": "2021-11-22T12:15:32.656861Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.657497Z", "completed_at": "2021-11-22T12:15:32.657502Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "absolute_time_in_s", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_absolute_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_absolute_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_absolute_time_in_s.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_absolute_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_absolute_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_absolute_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere absolute_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere absolute_time_in_s is null\n\n\n", "column_name": "absolute_time_in_s"}, "error": null, "status": null, "execution_time": 0.04323101043701172, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.628841Z", "completed_at": "2021-11-22T12:15:32.656986Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.657793Z", "completed_at": "2021-11-22T12:15:32.657797Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionidx", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_domain_sessionidx"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_domain_sessionidx", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_domain_sessionidx.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_domain_sessionidx", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_domain_sessionidx", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_domain_sessionidx.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_sessionidx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_sessionidx is null\n\n\n", "column_name": "domain_sessionidx"}, "error": null, "status": null, "execution_time": 0.0270230770111084, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.658848Z", "completed_at": "2021-11-22T12:15:32.679195Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.684795Z", "completed_at": "2021-11-22T12:15:32.684799Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_domain_userid.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.02746295928955078, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.659201Z", "completed_at": "2021-11-22T12:15:32.685195Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.685531Z", "completed_at": "2021-11-22T12:15:32.685534Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_end_tstamp.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.020462989807128906, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.672420Z", "completed_at": "2021-11-22T12:15:32.685359Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.685985Z", "completed_at": "2021-11-22T12:15:32.685988Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_engaged_time_in_s.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.02563309669494629, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.672490Z", "completed_at": "2021-11-22T12:15:32.685786Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.686273Z", "completed_at": "2021-11-22T12:15:32.686276Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "first_page_url", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_first_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_first_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_first_page_url.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_first_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_first_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_first_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere first_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere first_page_url is null\n\n\n", "column_name": "first_page_url"}, "error": null, "status": null, "execution_time": 0.0174410343170166, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.686225Z", "completed_at": "2021-11-22T12:15:32.692382Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.697858Z", "completed_at": "2021-11-22T12:15:32.697862Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "last_page_url", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_last_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_last_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_last_page_url.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_last_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_last_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_last_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere last_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere last_page_url is null\n\n\n", "column_name": "last_page_url"}, "error": null, "status": null, "execution_time": 0.01712512969970703, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.692343Z", "completed_at": "2021-11-22T12:15:32.708154Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.708545Z", "completed_at": "2021-11-22T12:15:32.708548Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_network_userid.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.017145156860351562, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.692610Z", "completed_at": "2021-11-22T12:15:32.708396Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.708911Z", "completed_at": "2021-11-22T12:15:32.708914Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_page_views"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_page_views", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_page_views.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_page_views", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_page_views", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_page_views.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere page_views is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere page_views is null\n\n\n", "column_name": "page_views"}, "error": null, "status": null, "execution_time": 0.022639036178588867, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.697976Z", "completed_at": "2021-11-22T12:15:32.708790Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.709190Z", "completed_at": "2021-11-22T12:15:32.709192Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_sessions_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_sessions_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_sessions_start_tstamp.sql", "original_file_path": "models/sessions/sessions.yml", "name": "not_null_snowplow_web_sessions_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_sessions_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/not_null_snowplow_web_sessions_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.017678022384643555, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.709143Z", "completed_at": "2021-11-22T12:15:32.715753Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.720906Z", "completed_at": "2021-11-22T12:15:32.720910Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_sessions') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_sessions_domain_sessionid"], "unique_id": "test.snowplow_web.unique_snowplow_web_sessions_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_sessions_domain_sessionid.sql", "original_file_path": "models/sessions/sessions.yml", "name": "unique_snowplow_web_sessions_domain_sessionid", "resource_type": "test", "alias": "unique_snowplow_web_sessions_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/sessions/sessions.yml/schema_test/unique_snowplow_web_sessions_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_sessions\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.01686406135559082, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.715701Z", "completed_at": "2021-11-22T12:15:32.731465Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.731806Z", "completed_at": "2021-11-22T12:15:32.731810Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_userid\"]),\n    sort='domain_userid',\n    dist='domain_userid'\n  ) \n}}\n\nselect\n  domain_userid,\n  -- time\n  user_start_tstamp as start_tstamp,\n  user_end_tstamp as end_tstamp,\n  -- first/last session. Max to resolve edge case with multiple sessions with the same start/end tstamp\n  max(case when start_tstamp = user_start_tstamp then domain_sessionid end) as first_domain_sessionid,\n  max(case when end_tstamp = user_end_tstamp then domain_sessionid end) as last_domain_sessionid,\n  -- engagement\n  sum(page_views) as page_views,\n  count(distinct domain_sessionid) as sessions,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom {{ ref('snowplow_web_users_sessions_this_run') }}\n\ngroup by 1,2,3", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "users", "scratch", "snowplow_web_users_aggs"], "unique_id": "model.snowplow_web.snowplow_web_users_aggs", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "users/scratch/snowplow_web_users_aggs.sql", "original_file_path": "models/users/scratch/snowplow_web_users_aggs.sql", "name": "snowplow_web_users_aggs", "resource_type": "model", "alias": "snowplow_web_users_aggs", "checksum": {"name": "sha256", "checksum": "cc760b004254e11a8ecd85ffd713a40ba817f3fa0f34948bde479bb333f4ce80"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["domain_userid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "domain_userid", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_users_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by"], "nodes": ["model.snowplow_web.snowplow_web_users_sessions_this_run"]}, "description": "This model aggregates various metrics derived from sessions to a users level.", "columns": {"domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users/scratch/users_scratch.yml", "build_path": "target/compiled/snowplow_web/models/users/scratch/snowplow_web_users_aggs.sql", "deferred": false, "compiled_sql": "\n\nselect\n  domain_userid,\n  -- time\n  user_start_tstamp as start_tstamp,\n  user_end_tstamp as end_tstamp,\n  -- first/last session. Max to resolve edge case with multiple sessions with the same start/end tstamp\n  max(case when start_tstamp = user_start_tstamp then domain_sessionid end) as first_domain_sessionid,\n  max(case when end_tstamp = user_end_tstamp then domain_sessionid end) as last_domain_sessionid,\n  -- engagement\n  sum(page_views) as page_views,\n  count(distinct domain_sessionid) as sessions,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\n\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  domain_userid,\n  -- time\n  user_start_tstamp as start_tstamp,\n  user_end_tstamp as end_tstamp,\n  -- first/last session. Max to resolve edge case with multiple sessions with the same start/end tstamp\n  max(case when start_tstamp = user_start_tstamp then domain_sessionid end) as first_domain_sessionid,\n  max(case when end_tstamp = user_end_tstamp then domain_sessionid end) as last_domain_sessionid,\n  -- engagement\n  sum(page_views) as page_views,\n  count(distinct domain_sessionid) as sessions,\n  sum(engaged_time_in_s) as engaged_time_in_s\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\n\ngroup by 1,2,3"}, "error": null, "status": null, "execution_time": 0.022058963775634766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.715987Z", "completed_at": "2021-11-22T12:15:32.731974Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.737182Z", "completed_at": "2021-11-22T12:15:32.737186Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_users_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_sessions_this_run_domain_sessionid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_sessions_this_run_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_sessions_this_run_domain_sessionid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_sessions_this_run_domain_sessionid", "resource_type": "test", "alias": "not_null_snowplow_web_users_sessions_this_run_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_sessions_this_run_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\nwhere domain_sessionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\nwhere domain_sessionid is null\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.022056102752685547, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.721023Z", "completed_at": "2021-11-22T12:15:32.732227Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.737429Z", "completed_at": "2021-11-22T12:15:32.737431Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_sessionid", "model": "{{ ref('snowplow_web_users_sessions_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_users_sessions_this_run_domain_sessionid"], "unique_id": "test.snowplow_web.unique_snowplow_web_users_sessions_this_run_domain_sessionid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_users_sessions_this_run_domain_sessionid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "unique_snowplow_web_users_sessions_this_run_domain_sessionid", "resource_type": "test", "alias": "unique_snowplow_web_users_sessions_this_run_domain_sessionid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_sessions_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_users_sessions_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/unique_snowplow_web_users_sessions_this_run_domain_sessionid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_sessionid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run\n    where domain_sessionid is not null\n    group by domain_sessionid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_sessionid"}, "error": null, "status": null, "execution_time": 0.012918949127197266, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.731936Z", "completed_at": "2021-11-22T12:15:32.737972Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.738394Z", "completed_at": "2021-11-22T12:15:32.738397Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equal_rowcount(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equal_rowcount", "kwargs": {"compare_model": "ref('snowplow_web_sessions_expected_stg')", "model": "{{ ref('snowplow_web_sessions_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equal_rowcount_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equal_rowcount_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equal_rowcount_snowplow_web_sessions_actual_c60a9a3212e707e4ada33dc6f717f2cb.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equal_rowcount_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equal_rowcount_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_sessions_expected_stg"], ["snowplow_web_sessions_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_sessions_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_sessions_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equal_rowcount_snowplow_web_sessions_actual_c60a9a3212e707e4ada33dc6f717f2cb.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.019279956817626953, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.738190Z", "completed_at": "2021-11-22T12:15:32.750050Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.756587Z", "completed_at": "2021-11-22T12:15:32.756591Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"domain_sessionid\"]),\n    sort='domain_userid',\n    dist='domain_userid'\n  ) \n}}\n\n\nselect\n  a.domain_userid,\n  a.last_page_title,\n\n  a.last_page_url,\n\n  a.last_page_urlscheme,\n  a.last_page_urlhost,\n  a.last_page_urlpath,\n  a.last_page_urlquery,\n  a.last_page_urlfragment\n\nfrom {{ ref('snowplow_web_users_sessions_this_run') }} a\n\ninner join {{ ref('snowplow_web_users_aggs') }} b\non a.domain_sessionid = b.last_domain_sessionid", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "users", "scratch", "snowplow_web_users_lasts"], "unique_id": "model.snowplow_web.snowplow_web_users_lasts", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "users/scratch/snowplow_web_users_lasts.sql", "original_file_path": "models/users/scratch/snowplow_web_users_lasts.sql", "name": "snowplow_web_users_lasts", "resource_type": "model", "alias": "snowplow_web_users_lasts", "checksum": {"name": "sha256", "checksum": "69aea21a1d709e063e99ff83d291f861ab12191864e27407946613a9e1fcfe78"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch"], "full_refresh": null, "cluster_by": ["domain_sessionid"], "sort": "domain_userid", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "scratch"], "refs": [["snowplow_web_users_sessions_this_run"], ["snowplow_web_users_aggs"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by"], "nodes": ["model.snowplow_web.snowplow_web_users_sessions_this_run", "model.snowplow_web.snowplow_web_users_aggs"]}, "description": "This model identifies the last page view for a user and returns various dimensions associated with that page view.", "columns": {"domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users/scratch/users_scratch.yml", "build_path": "target/compiled/snowplow_web/models/users/scratch/snowplow_web_users_lasts.sql", "deferred": false, "compiled_sql": "\n\n\nselect\n  a.domain_userid,\n  a.last_page_title,\n\n  a.last_page_url,\n\n  a.last_page_urlscheme,\n  a.last_page_urlhost,\n  a.last_page_urlpath,\n  a.last_page_urlquery,\n  a.last_page_urlfragment\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run a\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs b\non a.domain_sessionid = b.last_domain_sessionid", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nselect\n  a.domain_userid,\n  a.last_page_title,\n\n  a.last_page_url,\n\n  a.last_page_urlscheme,\n  a.last_page_urlhost,\n  a.last_page_urlpath,\n  a.last_page_urlquery,\n  a.last_page_urlfragment\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run a\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs b\non a.domain_sessionid = b.last_domain_sessionid"}, "error": null, "status": null, "execution_time": 0.018745899200439453, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.744700Z", "completed_at": "2021-11-22T12:15:32.757117Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.762317Z", "completed_at": "2021-11-22T12:15:32.762320Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_aggs') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_aggs_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_aggs_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_aggs_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_aggs_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_aggs_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_aggs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_aggs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_aggs_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.012385129928588867, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.756832Z", "completed_at": "2021-11-22T12:15:32.762876Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.763226Z", "completed_at": "2021-11-22T12:15:32.763229Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_aggs') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_users_aggs_domain_userid"], "unique_id": "test.snowplow_web.unique_snowplow_web_users_aggs_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_users_aggs_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "unique_snowplow_web_users_aggs_domain_userid", "resource_type": "test", "alias": "unique_snowplow_web_users_aggs_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_aggs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_users_aggs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/unique_snowplow_web_users_aggs_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.028512001037597656, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.763172Z", "completed_at": "2021-11-22T12:15:32.769824Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.782702Z", "completed_at": "2021-11-22T12:15:32.782707Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized='table',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_utils.get_cluster_by(bigquery_cols=[\"user_id\"]),\n    sort='start_tstamp',\n    dist='domain_userid',\n    tags=[\"this_run\"]\n  ) \n}}\n\nselect\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n  a.network_userid,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  {{ dbt_utils.current_timestamp_in_utc() }} as model_tstamp,\n\n  -- engagement fields\n  b.page_views,\n  b.sessions,\n\n  b.engaged_time_in_s,\n\n  -- first page fields\n  a.first_page_title,\n\n  a.first_page_url,\n\n  a.first_page_urlscheme,\n  a.first_page_urlhost,\n  a.first_page_urlpath,\n  a.first_page_urlquery,\n  a.first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network\n\nfrom {{ ref('snowplow_web_users_aggs') }} as b\n\ninner join {{ ref('snowplow_web_users_sessions_this_run') }} as a\non a.domain_sessionid = b.first_domain_sessionid\n\ninner join {{ ref('snowplow_web_users_lasts') }} c\non b.domain_userid = c.domain_userid", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_scratch", "fqn": ["snowplow_web", "users", "scratch", "snowplow_web_users_this_run"], "unique_id": "model.snowplow_web.snowplow_web_users_this_run", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "users/scratch/snowplow_web_users_this_run.sql", "original_file_path": "models/users/scratch/snowplow_web_users_this_run.sql", "name": "snowplow_web_users_this_run", "resource_type": "model", "alias": "snowplow_web_users_this_run", "checksum": {"name": "sha256", "checksum": "9421caef382708ac78c9a8f9db201d146682efe808d2e694a01537fba35939a1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "scratch", "database": null, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "full_refresh": null, "cluster_by": ["user_id"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "sort": "start_tstamp", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "scratch", "this_run"], "refs": [["snowplow_web_users_aggs"], ["snowplow_web_users_sessions_this_run"], ["snowplow_web_users_lasts"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_utils.get_cluster_by", "macro.dbt_utils.current_timestamp_in_utc"], "nodes": ["model.snowplow_web.snowplow_web_users_aggs", "model.snowplow_web.snowplow_web_users_sessions_this_run", "model.snowplow_web.snowplow_web_users_lasts"]}, "description": "This staging table contains all the users for the given run of the Web model. It possess all the same columns as `snowplow_web_users`. If building a custom module that requires session level data, this is the table you should reference.", "columns": {"user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the users lifecycle, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the last time the user was seen, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "page_views": {"name": "page_views", "description": "The total page views by the user", "meta": {}, "data_type": null, "tags": []}, "sessions": {"name": "sessions", "description": "The total sessions by the user", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "The total engaged time in seconds by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_title": {"name": "first_page_title", "description": "The title of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_url": {"name": "first_page_url", "description": "The url of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlscheme": {"name": "first_page_urlscheme", "description": "The urlscheme of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlhost": {"name": "first_page_urlhost", "description": "The urlhost of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlpath": {"name": "first_page_urlpath", "description": "The urlpath of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlquery": {"name": "first_page_urlquery", "description": "The urlquery of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlfragment": {"name": "first_page_urlfragment", "description": "The urlfragment of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_title": {"name": "last_page_title", "description": "The title of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_url": {"name": "last_page_url", "description": "The url of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlscheme": {"name": "last_page_urlscheme", "description": "The urlscheme of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlhost": {"name": "last_page_urlhost", "description": "The urlhost of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlpath": {"name": "last_page_urlpath", "description": "The urlpath of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlquery": {"name": "last_page_urlquery", "description": "The urlquery of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlfragment": {"name": "last_page_urlfragment", "description": "The urlfragment of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "referrer": {"name": "referrer", "description": "The referrer associated with the first page view of the user", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users/scratch/users_scratch.yml", "build_path": "target/compiled/snowplow_web/models/users/scratch/snowplow_web_users_this_run.sql", "deferred": false, "compiled_sql": "\n\nselect\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n  a.network_userid,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  -- engagement fields\n  b.page_views,\n  b.sessions,\n\n  b.engaged_time_in_s,\n\n  -- first page fields\n  a.first_page_title,\n\n  a.first_page_url,\n\n  a.first_page_urlscheme,\n  a.first_page_urlhost,\n  a.first_page_urlpath,\n  a.first_page_urlquery,\n  a.first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs as b\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run as a\non a.domain_sessionid = b.first_domain_sessionid\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts c\non b.domain_userid = c.domain_userid", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\n  -- user fields\n  a.user_id,\n  a.domain_userid,\n  a.network_userid,\n\n  b.start_tstamp,\n  b.end_tstamp,\n  \n    \n    current_timestamp\n\n as model_tstamp,\n\n  -- engagement fields\n  b.page_views,\n  b.sessions,\n\n  b.engaged_time_in_s,\n\n  -- first page fields\n  a.first_page_title,\n\n  a.first_page_url,\n\n  a.first_page_urlscheme,\n  a.first_page_urlhost,\n  a.first_page_urlpath,\n  a.first_page_urlquery,\n  a.first_page_urlfragment,\n\n  c.last_page_title,\n\n  c.last_page_url,\n\n  c.last_page_urlscheme,\n  c.last_page_urlhost,\n  c.last_page_urlpath,\n  c.last_page_urlquery,\n  c.last_page_urlfragment,\n\n  -- referrer fields\n  a.referrer,\n\n  a.refr_urlscheme,\n  a.refr_urlhost,\n  a.refr_urlpath,\n  a.refr_urlquery,\n  a.refr_urlfragment,\n\n  a.refr_medium,\n  a.refr_source,\n  a.refr_term,\n\n  -- marketing fields\n  a.mkt_medium,\n  a.mkt_source,\n  a.mkt_term,\n  a.mkt_content,\n  a.mkt_campaign,\n  a.mkt_clickid,\n  a.mkt_network\n\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_aggs as b\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_sessions_this_run as a\non a.domain_sessionid = b.first_domain_sessionid\n\ninner join `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts c\non b.domain_userid = c.domain_userid"}, "error": null, "status": null, "execution_time": 0.02849292755126953, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.769770Z", "completed_at": "2021-11-22T12:15:32.797460Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.797610Z", "completed_at": "2021-11-22T12:15:32.797614Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_lasts') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_lasts_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_lasts_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_lasts_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_lasts_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_lasts_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_lasts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_lasts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_lasts_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.028990983963012695, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.769936Z", "completed_at": "2021-11-22T12:15:32.797728Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.798093Z", "completed_at": "2021-11-22T12:15:32.798096Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_lasts') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_users_lasts_domain_userid"], "unique_id": "test.snowplow_web.unique_snowplow_web_users_lasts_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_users_lasts_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "unique_snowplow_web_users_lasts_domain_userid", "resource_type": "test", "alias": "unique_snowplow_web_users_lasts_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_lasts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_users_lasts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/unique_snowplow_web_users_lasts_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_lasts\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.007179975509643555, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.791739Z", "completed_at": "2021-11-22T12:15:32.797983Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.798299Z", "completed_at": "2021-11-22T12:15:32.798301Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.02369093894958496, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.799394Z", "completed_at": "2021-11-22T12:15:32.822527Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.822653Z", "completed_at": "2021-11-22T12:15:32.822658Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_end_tstamp.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.02947092056274414, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.812041Z", "completed_at": "2021-11-22T12:15:32.828130Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.828327Z", "completed_at": "2021-11-22T12:15:32.828330Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_engaged_time_in_s.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.011548995971679688, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.823071Z", "completed_at": "2021-11-22T12:15:32.829135Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.829318Z", "completed_at": "2021-11-22T12:15:32.829321Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "first_page_url", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_first_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_first_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_first_page_url.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_first_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_first_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_first_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere first_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere first_page_url is null\n\n\n", "column_name": "first_page_url"}, "error": null, "status": null, "execution_time": 0.007064104080200195, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.829257Z", "completed_at": "2021-11-22T12:15:32.835355Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.835654Z", "completed_at": "2021-11-22T12:15:32.835657Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_network_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.006012916564941406, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.864749Z", "completed_at": "2021-11-22T12:15:32.870263Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.870395Z", "completed_at": "2021-11-22T12:15:32.870400Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_page_views"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_page_views", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_page_views.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_page_views", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_page_views", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_page_views.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere page_views is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere page_views is null\n\n\n", "column_name": "page_views"}, "error": null, "status": null, "execution_time": 0.005414009094238281, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.870822Z", "completed_at": "2021-11-22T12:15:32.875826Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.875951Z", "completed_at": "2021-11-22T12:15:32.875954Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "sessions", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_sessions"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_sessions", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_sessions.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_sessions", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_sessions", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_sessions.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere sessions is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere sessions is null\n\n\n", "column_name": "sessions"}, "error": null, "status": null, "execution_time": 0.005302906036376953, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.876398Z", "completed_at": "2021-11-22T12:15:32.881294Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.881415Z", "completed_at": "2021-11-22T12:15:32.881419Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_start_tstamp.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.005300045013427734, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.881865Z", "completed_at": "2021-11-22T12:15:32.886761Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.886882Z", "completed_at": "2021-11-22T12:15:32.886885Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_users_this_run_domain_userid"], "unique_id": "test.snowplow_web.unique_snowplow_web_users_this_run_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_users_this_run_domain_userid.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "unique_snowplow_web_users_this_run_domain_userid", "resource_type": "test", "alias": "unique_snowplow_web_users_this_run_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/unique_snowplow_web_users_this_run_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.005352020263671875, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.887326Z", "completed_at": "2021-11-22T12:15:32.892270Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.892392Z", "completed_at": "2021-11-22T12:15:32.892396Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "last_page_url", "model": "{{ ref('snowplow_web_users_this_run') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_this_run_last_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_this_run_last_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_this_run_last_page_url.sql", "original_file_path": "models/users/scratch/users_scratch.yml", "name": "not_null_snowplow_web_users_this_run_last_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_users_this_run_last_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users_this_run"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/scratch/users_scratch.yml/schema_test/not_null_snowplow_web_users_this_run_last_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere last_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere last_page_url is null\n\n\n", "column_name": "last_page_url"}, "error": null, "status": null, "execution_time": 0.07254409790039062, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.835917Z", "completed_at": "2021-11-22T12:15:32.907698Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:32.907825Z", "completed_at": "2021-11-22T12:15:32.907831Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('snowplow_web_sessions_expected_stg')", "model": "{{ ref('snowplow_web_sessions_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equality_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equality_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equality_snowplow_web_sessions_actual_c60a9a3212e707e4ada33dc6f717f2cb.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equality_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equality_snowplow_web_sessions_actual_ref_snowplow_web_sessions_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_sessions_expected_stg"], ["snowplow_web_sessions_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_sessions_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_sessions_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equality_snowplow_web_sessions_actual_c60a9a3212e707e4ada33dc6f717f2cb.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected_stg\n\n),\n\na_minus_b as (\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n    \n\n    except distinct\n\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n\n),\n\nb_minus_a as (\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n    \n\n    except distinct\n\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_sessions_expected_stg\n\n),\n\na_minus_b as (\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n    \n\n    except distinct\n\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n\n),\n\nb_minus_a as (\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from b\n    \n\n    except distinct\n\n\n    select `app_id`, `domain_sessionid`, `domain_sessionidx`, `start_tstamp`, `end_tstamp`, `user_id`, `domain_userid`, `stitched_user_id`, `network_userid`, `page_views`, `engaged_time_in_s`, `absolute_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network`, `geo_country`, `geo_region`, `geo_region_name`, `geo_city`, `geo_zipcode`, `geo_latitude`, `geo_longitude`, `geo_timezone`, `user_ipaddress`, `useragent`, `br_renderengine`, `br_lang`, `os_timezone`, `category`, `primary_impact`, `reason`, `spider_or_robot`, `useragent_family`, `useragent_major`, `useragent_minor`, `useragent_patch`, `useragent_version`, `os_family`, `os_major`, `os_minor`, `os_patch`, `os_patch_minor`, `os_version`, `device_family`, `device_class`, `agent_class`, `agent_name`, `agent_name_version`, `agent_name_version_major`, `agent_version`, `agent_version_major`, `device_brand`, `device_name`, `device_version`, `layout_engine_class`, `layout_engine_name`, `layout_engine_name_version`, `layout_engine_name_version_major`, `layout_engine_version`, `layout_engine_version_major`, `operating_system_class`, `operating_system_name`, `operating_system_name_version`, `operating_system_version` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.8088560104370117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.744615Z", "completed_at": "2021-11-22T12:15:33.546645Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:33.546946Z", "completed_at": "2021-11-22T12:15:33.546955Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ \n  config(\n    materialized=var(\"snowplow__incremental_materialization\"),\n    unique_key='domain_userid',\n    upsert_date_key='start_tstamp',\n    disable_upsert_lookback=true,\n    sort='start_tstamp',\n    dist='domain_userid',\n    partition_by = {\n      \"field\": \"start_tstamp\",\n      \"data_type\": \"timestamp\"\n    },\n    cluster_by=snowplow_web.cluster_by_fields_users(),\n    tags=[\"derived\"]\n  ) \n}}\n\nselect * \nfrom {{ ref('snowplow_web_users_this_run') }}\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_web') }} --returns false if run doesn't contain new events.", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_derived", "fqn": ["snowplow_web", "users", "snowplow_web_users"], "unique_id": "model.snowplow_web.snowplow_web_users", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "users/snowplow_web_users.sql", "original_file_path": "models/users/snowplow_web_users.sql", "name": "snowplow_web_users", "resource_type": "model", "alias": "snowplow_web_users", "checksum": {"name": "sha256", "checksum": "4479b46e97371f774f6f2f826111fd2b8bd7c55ea7150ab32bb6d732c3313ae5"}, "config": {"enabled": true, "materialized": "snowplow_incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "derived", "database": null, "tags": ["snowplow_web_incremental", "derived"], "full_refresh": null, "cluster_by": ["user_id", "domain_userid"], "partition_by": {"field": "start_tstamp", "data_type": "timestamp"}, "unique_key": "domain_userid", "upsert_date_key": "start_tstamp", "disable_upsert_lookback": true, "sort": "start_tstamp", "dist": "domain_userid"}, "tags": ["snowplow_web_incremental", "derived"], "refs": [["snowplow_web_users_this_run"], ["snowplow_web_base_new_event_limits"], ["snowplow_web_incremental_manifest"]], "sources": [], "depends_on": {"macros": ["macro.snowplow_web.cluster_by_fields_users", "macro.snowplow_utils.is_run_with_new_events"], "nodes": ["model.snowplow_web.snowplow_web_users_this_run", "model.snowplow_web.snowplow_web_base_new_event_limits", "model.snowplow_web.snowplow_web_incremental_manifest"]}, "description": "This derived incremental table contains all historic users data and should be the end point for any analysis or BI tools.", "columns": {"user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "tags": ["primary-key"]}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "tags": []}, "start_tstamp": {"name": "start_tstamp", "description": "Timestamp for the start of the users lifecycle, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "end_tstamp": {"name": "end_tstamp", "description": "Timestamp for the last time the user was seen, based on `derived_tstamp`", "meta": {}, "data_type": null, "tags": []}, "model_tstamp": {"name": "model_tstamp", "description": "The current timestamp when the model processed this row.", "meta": {}, "data_type": null, "tags": []}, "page_views": {"name": "page_views", "description": "The total page views by the user", "meta": {}, "data_type": null, "tags": []}, "sessions": {"name": "sessions", "description": "The total sessions by the user", "meta": {}, "data_type": null, "tags": []}, "engaged_time_in_s": {"name": "engaged_time_in_s", "description": "The total engaged time in seconds by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_title": {"name": "first_page_title", "description": "The title of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_url": {"name": "first_page_url", "description": "The url of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlscheme": {"name": "first_page_urlscheme", "description": "The urlscheme of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlhost": {"name": "first_page_urlhost", "description": "The urlhost of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlpath": {"name": "first_page_urlpath", "description": "The urlpath of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlquery": {"name": "first_page_urlquery", "description": "The urlquery of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "first_page_urlfragment": {"name": "first_page_urlfragment", "description": "The urlfragment of the first page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_title": {"name": "last_page_title", "description": "The title of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_url": {"name": "last_page_url", "description": "The url of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlscheme": {"name": "last_page_urlscheme", "description": "The urlscheme of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlhost": {"name": "last_page_urlhost", "description": "The urlhost of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlpath": {"name": "last_page_urlpath", "description": "The urlpath of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlquery": {"name": "last_page_urlquery", "description": "The urlquery of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "last_page_urlfragment": {"name": "last_page_urlfragment", "description": "The urlfragment of the last page visited by the user", "meta": {}, "data_type": null, "tags": []}, "referrer": {"name": "referrer", "description": "The referrer associated with the first page view of the user", "meta": {}, "data_type": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users/users.yml", "build_path": "target/compiled/snowplow_web/models/users/snowplow_web_users.sql", "deferred": false, "compiled_sql": "\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events.", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * \nfrom `com-snplow-eng-gcp`.dbt_will_scratch.snowplow_web_users_this_run\nwhere cast(0 as boolean) --returns false if run doesn't contain new events."}, "error": null, "status": null, "execution_time": 1.2918989658355713, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:32.799245Z", "completed_at": "2021-11-22T12:15:34.089755Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.090229Z", "completed_at": "2021-11-22T12:15:34.090241Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Removing model_tstamp\n\nselect\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- engagement fields\n  page_views,\n  sessions,\n\n  engaged_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network\n\nfrom {{ ref('snowplow_web_users') }}", "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "actual", "snowplow_web_users_actual"], "unique_id": "model.snowplow_web_integration_tests.snowplow_web_users_actual", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "actual/snowplow_web_users_actual.sql", "original_file_path": "models/actual/snowplow_web_users_actual.sql", "name": "snowplow_web_users_actual", "resource_type": "model", "alias": "snowplow_web_users_actual", "checksum": {"name": "sha256", "checksum": "d7d1f9a775845c28a8fc4921902905f1ee61daa71cf32531a2662f9999fb1084"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/actual/actual_vs_expected.yml", "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/snowplow_web_users_actual.sql", "deferred": false, "compiled_sql": "--Removing model_tstamp\n\nselect\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- engagement fields\n  page_views,\n  sessions,\n\n  engaged_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Removing model_tstamp\n\nselect\n  -- user fields\n  user_id,\n  domain_userid,\n  network_userid,\n\n  start_tstamp,\n  end_tstamp,\n\n  -- engagement fields\n  page_views,\n  sessions,\n\n  engaged_time_in_s,\n\n  -- first page fields\n  first_page_title,\n\n  first_page_url,\n\n  first_page_urlscheme,\n  first_page_urlhost,\n  first_page_urlpath,\n  first_page_urlquery,\n  first_page_urlfragment,\n\n  last_page_title,\n\n  last_page_url,\n\n  last_page_urlscheme,\n  last_page_urlhost,\n  last_page_urlpath,\n  last_page_urlquery,\n  last_page_urlfragment,\n\n  -- referrer fields\n  referrer,\n\n  refr_urlscheme,\n  refr_urlhost,\n  refr_urlpath,\n  refr_urlquery,\n  refr_urlfragment,\n\n  refr_medium,\n  refr_source,\n  refr_term,\n\n  -- marketing fields\n  mkt_medium,\n  mkt_source,\n  mkt_term,\n  mkt_content,\n  mkt_campaign,\n  mkt_clickid,\n  mkt_network\n\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users"}, "error": null, "status": null, "execution_time": 0.04521989822387695, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.093805Z", "completed_at": "2021-11-22T12:15:34.136708Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.137202Z", "completed_at": "2021-11-22T12:15:34.137210Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_domain_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_domain_userid.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_domain_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere domain_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere domain_userid is null\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.04517006874084473, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.094283Z", "completed_at": "2021-11-22T12:15:34.136951Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.137442Z", "completed_at": "2021-11-22T12:15:34.137447Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "engaged_time_in_s", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_engaged_time_in_s"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_engaged_time_in_s", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_engaged_time_in_s.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_engaged_time_in_s", "resource_type": "test", "alias": "not_null_snowplow_web_users_engaged_time_in_s", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_engaged_time_in_s.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere engaged_time_in_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere engaged_time_in_s is null\n\n\n", "column_name": "engaged_time_in_s"}, "error": null, "status": null, "execution_time": 0.04545021057128906, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.105978Z", "completed_at": "2021-11-22T12:15:34.137869Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.138541Z", "completed_at": "2021-11-22T12:15:34.138545Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "end_tstamp", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_end_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_end_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_end_tstamp.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_end_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_users_end_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_end_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere end_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere end_tstamp is null\n\n\n", "column_name": "end_tstamp"}, "error": null, "status": null, "execution_time": 0.046185970306396484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.094419Z", "completed_at": "2021-11-22T12:15:34.138020Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.138792Z", "completed_at": "2021-11-22T12:15:34.138796Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "first_page_url", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_first_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_first_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_first_page_url.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_first_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_users_first_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_first_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere first_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere first_page_url is null\n\n\n", "column_name": "first_page_url"}, "error": null, "status": null, "execution_time": 0.028469085693359375, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.139876Z", "completed_at": "2021-11-22T12:15:34.160951Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.167013Z", "completed_at": "2021-11-22T12:15:34.167019Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "last_page_url", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_last_page_url"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_last_page_url", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_last_page_url.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_last_page_url", "resource_type": "test", "alias": "not_null_snowplow_web_users_last_page_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_last_page_url.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere last_page_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere last_page_url is null\n\n\n", "column_name": "last_page_url"}, "error": null, "status": null, "execution_time": 0.028003215789794922, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.140198Z", "completed_at": "2021-11-22T12:15:34.166887Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.167234Z", "completed_at": "2021-11-22T12:15:34.167238Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "network_userid", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_network_userid"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_network_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_network_userid.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_network_userid", "resource_type": "test", "alias": "not_null_snowplow_web_users_network_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_network_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere network_userid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere network_userid is null\n\n\n", "column_name": "network_userid"}, "error": null, "status": null, "execution_time": 0.02071094512939453, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.154573Z", "completed_at": "2021-11-22T12:15:34.167372Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.167884Z", "completed_at": "2021-11-22T12:15:34.167888Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "page_views", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_page_views"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_page_views", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_page_views.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_page_views", "resource_type": "test", "alias": "not_null_snowplow_web_users_page_views", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_page_views.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere page_views is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere page_views is null\n\n\n", "column_name": "page_views"}, "error": null, "status": null, "execution_time": 0.020940065383911133, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.154665Z", "completed_at": "2021-11-22T12:15:34.167773Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.168234Z", "completed_at": "2021-11-22T12:15:34.168237Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "start_tstamp", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_start_tstamp"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_start_tstamp", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_start_tstamp.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_start_tstamp", "resource_type": "test", "alias": "not_null_snowplow_web_users_start_tstamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_start_tstamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere start_tstamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere start_tstamp is null\n\n\n", "column_name": "start_tstamp"}, "error": null, "status": null, "execution_time": 0.024361848831176758, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.169035Z", "completed_at": "2021-11-22T12:15:34.186274Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.192520Z", "completed_at": "2021-11-22T12:15:34.192525Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "sessions", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "not_null_snowplow_web_users_sessions"], "unique_id": "test.snowplow_web.not_null_snowplow_web_users_sessions", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/not_null_snowplow_web_users_sessions.sql", "original_file_path": "models/users/users.yml", "name": "not_null_snowplow_web_users_sessions", "resource_type": "test", "alias": "not_null_snowplow_web_users_sessions", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/not_null_snowplow_web_users_sessions.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere sessions is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\nwhere sessions is null\n\n\n", "column_name": "sessions"}, "error": null, "status": null, "execution_time": 0.02467489242553711, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.168985Z", "completed_at": "2021-11-22T12:15:34.192011Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.192648Z", "completed_at": "2021-11-22T12:15:34.192651Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "domain_userid", "model": "{{ ref('snowplow_web_users') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will", "fqn": ["snowplow_web", "schema_test", "unique_snowplow_web_users_domain_userid"], "unique_id": "test.snowplow_web.unique_snowplow_web_users_domain_userid", "package_name": "snowplow_web", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests/dbt_modules/snowplow_web", "path": "schema_test/unique_snowplow_web_users_domain_userid.sql", "original_file_path": "models/users/users.yml", "name": "unique_snowplow_web_users_domain_userid", "resource_type": "test", "alias": "unique_snowplow_web_users_domain_userid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["primary-key", "schema"], "refs": [["snowplow_web_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_web.snowplow_web_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web/models/users/users.yml/schema_test/unique_snowplow_web_users_domain_userid.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        domain_userid\n\n    from `com-snplow-eng-gcp`.dbt_will_derived.snowplow_web_users\n    where domain_userid is not null\n    group by domain_userid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "domain_userid"}, "error": null, "status": null, "execution_time": 0.0245969295501709, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.180878Z", "completed_at": "2021-11-22T12:15:34.192819Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.193331Z", "completed_at": "2021-11-22T12:15:34.193334Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equal_rowcount(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equal_rowcount", "kwargs": {"compare_model": "ref('snowplow_web_users_expected_stg')", "model": "{{ ref('snowplow_web_users_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equal_rowcount_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equal_rowcount_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equal_rowcount_snowplow_web_users_actual_e50e62911e719e3ff1023601ac5234a7.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equal_rowcount_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equal_rowcount_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_users_expected_stg"], ["snowplow_web_users_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_users_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_users_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equal_rowcount_snowplow_web_users_actual_e50e62911e719e3ff1023601ac5234a7.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith a as (\n\n    select count(*) as count_a from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_actual\n\n),\nb as (\n\n    select count(*) as count_b from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected_stg\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.013277769088745117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.181045Z", "completed_at": "2021-11-22T12:15:34.193215Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.193590Z", "completed_at": "2021-11-22T12:15:34.193593Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_equality(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "equality", "kwargs": {"compare_model": "ref('snowplow_web_users_expected_stg')", "model": "{{ ref('snowplow_web_users_actual') }}"}}, "compiled": true, "database": "com-snplow-eng-gcp", "schema": "dbt_will_snplw_web_int_tests", "fqn": ["snowplow_web_integration_tests", "schema_test", "dbt_utils_equality_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_"], "unique_id": "test.snowplow_web_integration_tests.dbt_utils_equality_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "package_name": "snowplow_web_integration_tests", "root_path": "/Users/williamwarner/Git/dbt-snowplow-web/integration_tests", "path": "schema_test/dbt_utils_equality_snowplow_web_users_actual_e50e62911e719e3ff1023601ac5234a7.sql", "original_file_path": "models/actual/actual_vs_expected.yml", "name": "dbt_utils_equality_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "resource_type": "test", "alias": "dbt_utils_equality_snowplow_web_users_actual_ref_snowplow_web_users_expected_stg_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "snplw_web_int_tests", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["snowplow_web_users_expected_stg"], ["snowplow_web_users_actual"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_equality"], "nodes": ["model.snowplow_web_integration_tests.snowplow_web_users_expected_stg", "model.snowplow_web_integration_tests.snowplow_web_users_actual"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/snowplow_web_integration_tests/models/actual/actual_vs_expected.yml/schema_test/dbt_utils_equality_snowplow_web_users_actual_e50e62911e719e3ff1023601ac5234a7.sql", "deferred": false, "compiled_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected_stg\n\n),\n\na_minus_b as (\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from a\n    \n\n    except distinct\n\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from b\n\n),\n\nb_minus_a as (\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from b\n    \n\n    except distinct\n\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- setup\n\n\nwith a as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_actual\n\n),\n\nb as (\n\n    select * from `com-snplow-eng-gcp`.dbt_will_snplw_web_int_tests.snowplow_web_users_expected_stg\n\n),\n\na_minus_b as (\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from a\n    \n\n    except distinct\n\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from b\n\n),\n\nb_minus_a as (\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from b\n    \n\n    except distinct\n\n\n    select `user_id`, `domain_userid`, `network_userid`, `start_tstamp`, `end_tstamp`, `page_views`, `sessions`, `engaged_time_in_s`, `first_page_title`, `first_page_url`, `first_page_urlscheme`, `first_page_urlhost`, `first_page_urlpath`, `first_page_urlquery`, `first_page_urlfragment`, `last_page_title`, `last_page_url`, `last_page_urlscheme`, `last_page_urlhost`, `last_page_urlpath`, `last_page_urlquery`, `last_page_urlfragment`, `referrer`, `refr_urlscheme`, `refr_urlhost`, `refr_urlpath`, `refr_urlquery`, `refr_urlfragment`, `refr_medium`, `refr_source`, `refr_term`, `mkt_medium`, `mkt_source`, `mkt_term`, `mkt_content`, `mkt_campaign`, `mkt_clickid`, `mkt_network` from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.7432899475097656, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2021-11-22T12:15:34.194126Z", "completed_at": "2021-11-22T12:15:34.936043Z"}, {"name": "execute", "started_at": "2021-11-22T12:15:34.936550Z", "completed_at": "2021-11-22T12:15:34.936563Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-11-22T12:15:34.939142Z", "elapsed_time": 14.034964799880981}